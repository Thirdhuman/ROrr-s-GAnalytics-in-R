city_coords=merge(destination, origin, by.x = ('destination_name'), by.y=('origin_name'))
city_coords
is.na(city_coords$lon.x
city_coords=merge(destination, origin, by.x = ('destination_name'), by.y=('origin_name'))
is.na(city_coords$lon.x)
city_coords = ifelse(!is.na(city_coords$lon.x), city_coords$lon = city_coords$lon.x,
city_coords = ifelse(!is.na(city_coords$lon.x), city_coords$lon = city_coords$lon.x,
city_coords = ifelse(!is.na(city_coords$lat.y), city_coords$lat = city_coords$lon.y,
city_coords$lat = ifelse(!is.na(city_coords$lat.y), city_coords$lat.y,
ifelse(!is.na(city_coords$lat.x), city_coords$lat.x, NA
))
city_coords$lon = ifelse(!is.na(city_coords$lon.x), city_coords$lon.x,
ifelse(!is.na(city_coords$lon.y), city_coords$lon.y, NA))
city_coords
city_coords=merge(destination, origin, by.x = ('destination_name'), by.y=('origin_name'))
city_coords$lon = ifelse(!is.na(city_coords$lon.x), city_coords$lon.x,
ifelse(!is.na(city_coords$lon.y), city_coords$lon.y, NA))
city_coords$lat = ifelse(!is.na(city_coords$lat.y), city_coords$lat.y,
ifelse(!is.na(city_coords$lat.x), city_coords$lat.x, NA
))
names(city_coords)[names(city_coords) == 'destination_name'] <- 'city_name'
city_coords
city_coords=merge(destination, origin, by.x = ('destination_name'), by.y=('origin_name'))
city_coords$lon = ifelse(!is.na(city_coords$lon.x), city_coords$lon.x,
ifelse(!is.na(city_coords$lon.y), city_coords$lon.y, NA))
city_coords$lat = ifelse(!is.na(city_coords$lat.y), city_coords$lat.y,
ifelse(!is.na(city_coords$lat.x), city_coords$lat.x, NA
))
names(city_coords)[names(city_coords) == 'destination_name'] <- 'city_name'
city_coords$lon.x = NULL
city_coords$lon.y = NULL
city_coords$lat.x = NULL
city_coords$lat.y = NULL
city_coordinates = city_coords
anyNA(city_coordinates)
write.csv(city_coordinates, 'city_coordinates.csv')
city_coordinates
city_coords=merge(destination, origin, by.x = ('destination_name'), by.y=('origin_name'))
city_coords$lon = ifelse(!is.na(city_coords$lon.x), city_coords$lon.x,
ifelse(!is.na(city_coords$lon.y), city_coords$lon.y, NA))
city_coords$lat = ifelse(!is.na(city_coords$lat.y), city_coords$lat.y,
ifelse(!is.na(city_coords$lat.x), city_coords$lat.x, NA
))
names(city_coords)[names(city_coords) == 'destination_name'] <- 'city_name'
city_coords$lon.x = NULL
city_coords$lon.y = NULL
city_coords$lat.x = NULL
city_coords$lat.y = NULL
city_coordinates = city_coords
is.na(city_coordinates)
write.csv(city_coordinates, 'city_coordinates.csv')
city_coordinates
fill_these=subset(city_coordinates, is.na(lat))
View(fill_these)
fill_these=subset(city_coordinates, is.na(lat))
fill_these$lat = NULL
fill_these$lon = NULL
last_codes=geocode(unique(fill_these$city_name))
last_codes=geocode((fill_these))
fill_cities=as.list(fill_these$city_name)
last_codes=geocode((fill_cities))
fill_cities=as.list(as.character(fill_these$city_name))
last_codes=geocode(fill_cities)
fill_cities=as.character((fill_these$city_name))
last_codes=geocode(fill_cities)
View(last_codes)
sweep=data.frame(fill_cities ,last_codes)
sweep
fill_cities=as.character((fill_these$city_name))
last_codes=geocode(fill_cities)
sweep=data.frame(fill_cities ,last_codes)
city_coords$lat = ifelse((city_coords$city_name == sweep$fill_cities), sweep$lat, NA
)
city_coords$lat = ifelse((city_coords$city_name == sweep$fill_cities), sweep$lat, NA
)
View(sweep)
#fill_cities=as.character((fill_these$city_name))
#last_codes=geocode(fill_cities)
#sweep=data.frame(fill_cities ,last_codes)
city_coords$lat[match(sweep$lat,city_coords$lat)] = sweep$lat
city_coords$lat[na.omit(match(sweep$lat,city_coords$lat))] = sweep$lat
city_coords$lon[na.omit(match(sweep$lon,city_coords$lon))] = sweep$lon
sweep$lat,city_coords$lat
city_coords$lat
sweep$lat
city_coords$lat[na.omit(match(sweep$lat,city_coords$lat))] = sweep$lat[which(sweep$lat %in% city_coords$lat)]
city_coords$lon[na.omit(match(sweep$lon,city_coords$lon))] = sweep$lon[which(sweep$lon %in% city_coords$lon)]
count(is.na(city_coords$lon))
length(is.na(city_coords$lon))
View(city_coords)
sum(is.na(city_coords$lon))
fill_these=subset(city_coordinates, is.na(lat))
fill_these$lat = NULL
fill_these$lon = NULL
fill_cities=as.character((fill_these$city_name))
last_codes=geocode(fill_cities)
#sweep=data.frame(fill_cities ,last_codes)
city_coords$lat[na.omit(match(sweep$lat,city_coords$lat))] = sweep$lat[which(sweep$lat %in% city_coords$lat)]
city_coords$lon[na.omit(match(sweep$lon,city_coords$lon))] = sweep$lon[which(sweep$lon %in% city_coords$lon)]
# city_coords$lat = ifelse((city_coords$city_name == sweep$fill_cities), sweep$lat, NA )
# city_coords$lon = ifelse((city_coords$city_name == sweep$fill_cities), sweep$lon, NA  )
sum(is.na(city_coords$lon))
# fill_these=subset(city_coordinates, is.na(lat))
# fill_these$lat = NULL
# fill_these$lon = NULL
#
# fill_cities=as.character((fill_these$city_name))
# last_codes=geocode(fill_cities)
#sweep=data.frame(fill_cities ,last_codes)
city_coords$lat[(match(sweep$lat,city_coords$lat))] = sweep$lat[which(sweep$lat %in% city_coords$lat)]
sweep_insert = merge(city_coords, sweep, by.x = 'city_name', by.y = 'fill_cities')
View(sweep_insert)
sweep_insert = merge(city_coords, sweep, by.x = 'city_name', by.y = 'fill_cities')
sweep_insert$lon = ifelse(!is.na(sweep_insert$lon.x), sweep_insert$lon.x,
ifelse(!is.na(city_coords$lon.y), sweep_insert$lon.y, NA))
sweep_insert$lat = ifelse(!is.na(sweep_insert$lat.y), sweep_insert$lat.y,
ifelse(!is.na(sweep_insert$lat.x), sweep_insert$lat.x, NA
))
sweep_insert$lon = ifelse(!is.na(sweep_insert$lon.x), sweep_insert$lon.x,
ifelse(!is.na(sweep_insert$lon.y), sweep_insert$lon.y, NA))
sweep_insert$lat = ifelse(!is.na(sweep_insert$lat.y), sweep_insert$lat.y,
ifelse(!is.na(sweep_insert$lat.x), sweep_insert$lat.x, NA))
sweep_insert = merge(city_coords, sweep, by.x = 'city_name', by.y = 'fill_cities', all.x = T)
sweep_insert$lon = ifelse(!is.na(sweep_insert$lon.x), sweep_insert$lon.x,
ifelse(!is.na(sweep_insert$lon.y), sweep_insert$lon.y, NA))
sweep_insert$lat = ifelse(!is.na(sweep_insert$lat.y), sweep_insert$lat.y,
ifelse(!is.na(sweep_insert$lat.x), sweep_insert$lat.x, NA))
sum(is.na(sweep_insert$lon))
city_coords = sweep_insert
sweep_insert$lon.x = NULL
sweep_insert$lon.y = NULL
sweep_insert$lat.x = NULL
sweep_insert$lat.y = NULL
city_coords = sweep_insert
sum(is.na(sweep_insert$lon))
fill_these=subset(city_coords, is.na(lat))
fill_these$lat = NULL
fill_these$lon = NULL
fill_cities=as.character((fill_these$city_name))
last_codes=geocode(fill_cities)
sweep_insert = merge(city_coords, sweep, by.x = 'city_name', by.y = 'fill_cities', all.x = T)
sweep_insert$lon = ifelse(!is.na(sweep_insert$lon.x), sweep_insert$lon.x,
ifelse(!is.na(sweep_insert$lon.y), sweep_insert$lon.y, NA))
sweep_insert$lat = ifelse(!is.na(sweep_insert$lat.y), sweep_insert$lat.y,
ifelse(!is.na(sweep_insert$lat.x), sweep_insert$lat.x, NA))
sweep_insert$lon.x = NULL
sweep_insert$lon.y = NULL
sweep_insert$lat.x = NULL
sweep_insert$lat.y = NULL
city_coords = sweep_insert
sum(is.na(sweep_insert$lon))
fill_these=subset(city_coords, is.na(lat))
fill_these$lat = NULL
fill_these$lon = NULL
fill_cities=as.character((fill_these$city_name))
last_codes=geocode(fill_cities)
sweep=data.frame(fill_cities ,last_codes)
sweep_insert = merge(city_coords, sweep, by.x = 'city_name', by.y = 'fill_cities', all.x = T)
sweep_insert$lon = ifelse(!is.na(sweep_insert$lon.x), sweep_insert$lon.x,
ifelse(!is.na(sweep_insert$lon.y), sweep_insert$lon.y, NA))
sweep_insert$lat = ifelse(!is.na(sweep_insert$lat.y), sweep_insert$lat.y,
ifelse(!is.na(sweep_insert$lat.x), sweep_insert$lat.x, NA))
sweep_insert$lon.x = NULL
sweep_insert$lon.y = NULL
sweep_insert$lat.x = NULL
sweep_insert$lat.y = NULL
city_coords = sweep_insert
# city_coords$lat = ifelse((city_coords$city_name == sweep$fill_cities), sweep$lat, NA )
# city_coords$lon = ifelse((city_coords$city_name == sweep$fill_cities), sweep$lon, NA  )
sum(is.na(sweep_insert$lon))
fill_these=subset(city_coords, is.na(lat))
fill_these$lat = NULL
fill_these$lon = NULL
fill_cities=as.character((fill_these$city_name))
last_codes=geocode(fill_cities)
sweep=data.frame(fill_cities ,last_codes)
sweep_insert = merge(city_coords, sweep, by.x = 'city_name', by.y = 'fill_cities', all.x = T)
sweep_insert$lon = ifelse(!is.na(sweep_insert$lon.x), sweep_insert$lon.x,
ifelse(!is.na(sweep_insert$lon.y), sweep_insert$lon.y, NA))
sweep_insert$lat = ifelse(!is.na(sweep_insert$lat.y), sweep_insert$lat.y,
ifelse(!is.na(sweep_insert$lat.x), sweep_insert$lat.x, NA))
sweep_insert$lon.x = NULL
sweep_insert$lon.y = NULL
sweep_insert$lat.x = NULL
sweep_insert$lat.y = NULL
city_coords = sweep_insert
# city_coords$lat = ifelse((city_coords$city_name == sweep$fill_cities), sweep$lat, NA )
# city_coords$lon = ifelse((city_coords$city_name == sweep$fill_cities), sweep$lon, NA  )
sum(is.na(sweep_insert$lon))
fill_these=subset(city_coords, is.na(lat))
fill_these$lat = NULL
fill_these$lon = NULL
fill_cities=as.character((fill_these$city_name))
last_codes=geocode(fill_cities)
sweep=data.frame(fill_cities ,last_codes)
sweep_insert = merge(city_coords, sweep, by.x = 'city_name', by.y = 'fill_cities', all.x = T)
sweep_insert$lon = ifelse(!is.na(sweep_insert$lon.x), sweep_insert$lon.x,
ifelse(!is.na(sweep_insert$lon.y), sweep_insert$lon.y, NA))
sweep_insert$lat = ifelse(!is.na(sweep_insert$lat.y), sweep_insert$lat.y,
ifelse(!is.na(sweep_insert$lat.x), sweep_insert$lat.x, NA))
sweep_insert$lon.x = NULL
sweep_insert$lon.y = NULL
sweep_insert$lat.x = NULL
sweep_insert$lat.y = NULL
city_coords = sweep_insert
# city_coords$lat = ifelse((city_coords$city_name == sweep$fill_cities), sweep$lat, NA )
# city_coords$lon = ifelse((city_coords$city_name == sweep$fill_cities), sweep$lon, NA  )
sum(is.na(sweep_insert$lon))
fill_these=subset(city_coords, is.na(lat))
fill_these$lat = NULL
fill_these$lon = NULL
fill_cities=as.character((fill_these$city_name))
last_codes=geocode(fill_cities)
sweep=data.frame(fill_cities ,last_codes)
sweep_insert = merge(city_coords, sweep, by.x = 'city_name', by.y = 'fill_cities', all.x = T)
sweep_insert$lon = ifelse(!is.na(sweep_insert$lon.x), sweep_insert$lon.x,
ifelse(!is.na(sweep_insert$lon.y), sweep_insert$lon.y, NA))
sweep_insert$lat = ifelse(!is.na(sweep_insert$lat.y), sweep_insert$lat.y,
ifelse(!is.na(sweep_insert$lat.x), sweep_insert$lat.x, NA))
sweep_insert$lon.x = NULL
sweep_insert$lon.y = NULL
sweep_insert$lat.x = NULL
sweep_insert$lat.y = NULL
city_coords = sweep_insert
# city_coords$lat = ifelse((city_coords$city_name == sweep$fill_cities), sweep$lat, NA )
# city_coords$lon = ifelse((city_coords$city_name == sweep$fill_cities), sweep$lon, NA  )
sum(is.na(sweep_insert$lon))
fill_these=subset(city_coords, is.na(lat))
fill_these$lat = NULL
fill_these$lon = NULL
fill_cities=as.character((fill_these$city_name))
last_codes=geocode(fill_cities)
sweep=data.frame(fill_cities ,last_codes)
sweep_insert = merge(city_coords, sweep, by.x = 'city_name', by.y = 'fill_cities', all.x = T)
sweep_insert$lon = ifelse(!is.na(sweep_insert$lon.x), sweep_insert$lon.x,
ifelse(!is.na(sweep_insert$lon.y), sweep_insert$lon.y, NA))
sweep_insert$lat = ifelse(!is.na(sweep_insert$lat.y), sweep_insert$lat.y,
ifelse(!is.na(sweep_insert$lat.x), sweep_insert$lat.x, NA))
sweep_insert$lon.x = NULL
sweep_insert$lon.y = NULL
sweep_insert$lat.x = NULL
sweep_insert$lat.y = NULL
city_coords = sweep_insert
# city_coords$lat = ifelse((city_coords$city_name == sweep$fill_cities), sweep$lat, NA )
# city_coords$lon = ifelse((city_coords$city_name == sweep$fill_cities), sweep$lon, NA  )
sum(is.na(sweep_insert$lon))
fill_these=subset(city_coords, is.na(lat))
fill_these$lat = NULL
fill_these$lon = NULL
fill_cities=as.character((fill_these$city_name))
last_codes=geocode(fill_cities)
sweep=data.frame(fill_cities ,last_codes)
sweep_insert = merge(city_coords, sweep, by.x = 'city_name', by.y = 'fill_cities', all.x = T)
sweep_insert$lon = ifelse(!is.na(sweep_insert$lon.x), sweep_insert$lon.x,
ifelse(!is.na(sweep_insert$lon.y), sweep_insert$lon.y, NA))
sweep_insert$lat = ifelse(!is.na(sweep_insert$lat.y), sweep_insert$lat.y,
ifelse(!is.na(sweep_insert$lat.x), sweep_insert$lat.x, NA))
sweep_insert$lon.x = NULL
sweep_insert$lon.y = NULL
sweep_insert$lat.x = NULL
sweep_insert$lat.y = NULL
city_coords = sweep_insert
# city_coords$lat = ifelse((city_coords$city_name == sweep$fill_cities), sweep$lat, NA )
# city_coords$lon = ifelse((city_coords$city_name == sweep$fill_cities), sweep$lon, NA  )
sum(is.na(sweep_insert$lon))
sweep_insert
sweep
sweep$lat = -14.27806
sweep$lon = -170.7025
sweep$lat = -14.27806
sweep$lon = -170.7025
sweep_insert = merge(city_coords, sweep, by.x = 'city_name', by.y = 'fill_cities', all.x = T)
sweep_insert$lon = ifelse(!is.na(sweep_insert$lon.x), sweep_insert$lon.x,
ifelse(!is.na(sweep_insert$lon.y), sweep_insert$lon.y, NA))
sweep_insert$lat = ifelse(!is.na(sweep_insert$lat.y), sweep_insert$lat.y,
ifelse(!is.na(sweep_insert$lat.x), sweep_insert$lat.x, NA))
sweep_insert$lon.x = NULL
sweep_insert$lon.y = NULL
sweep_insert$lat.x = NULL
sweep_insert$lat.y = NULL
city_coords = sweep_insert
# city_coords$lat = ifelse((city_coords$city_name == sweep$fill_cities), sweep$lat, NA )
# city_coords$lon = ifelse((city_coords$city_name == sweep$fill_cities), sweep$lon, NA  )
sum(is.na(sweep_insert$lon))
city_coordinates = city_coords
city_coordinates = city_coords
is.na(city_coordinates)
any.na(city_coordinates)
anyNA((city_coordinates))
write.csv(city_coordinates, 'city_coordinates.csv')
setwd("~/PythonStuff/Project ArmBop/Robert/Data/")
flight_dt=read_csv('Merged_Flights.csv')
setwd("~/PythonStuff/Project ArmBop/Robert/Data/")
flight_dt=read_csv('Merged_Flights.csv')
setwd("~/PythonStuff/Project ArmBop/Robert/Data/")
flight_dt=read_csv('Merged_Flights.csv')
keys=read_csv('Keys.csv')
Ccodes=read_csv('Carrier Code.csv')
coordinates=read_csv('city_coordinates.csv')
flight_dt=setDT(flight_dt)
names(flight_dt)
names(flight_dt)=tolower(names(flight_dt))
names(flight_dt)
unique(flight_dt$origin_city_name)
names(flight_dt)=tolower(names(flight_dt))
names(flight_dt)
#unique(flight_dt$origin_city_name)
flight_dt=merge(flight_dt, coordinates, by.x = 'dest_city_name', by.y = coordinates$city_name)
flight_dt=merge(flight_dt, coordinates, by.x = 'dest_city_name', by.y = 'city_name')
names(flight_dt)[names(flight_dt) == 'lat'] <- 'dest_lat'
names(flight_dt)[names(flight_dt) == 'lon'] <- 'dest_lon'
library(rsconnect)
library(leaflet)
library(shinydashboard)
library(shiny)
library(RColorBrewer)
library(scales)
library(rsconnect)
library(shiny)
rsconnect::deployApp('/Users/rorr/PythonStuff/Project-ArmBop/Robert/map_app')
detach(shiny)
rsconnect::deployApp('/Users/rorr/PythonStuff/Project-ArmBop/Robert/map_app')
library(leaflet)
library(shinydashboard)
#library(shiny)
library(RColorBrewer)
library(scales)
library(lattice)
library(dplyr)
library(leaflet.minicharts)
library(rsconnect)
rsconnect::deployApp('/Users/rorr/PythonStuff/Project-ArmBop/Robert/map_app')
shiny::runApp('PythonStuff/Project-ArmBop/Robert/map_app')
runApp('PythonStuff/Project-ArmBop/Robert/map_app')
install.packages("stringi")
library(survey)
library(reshape2)
library(plyr)
x <- readRDS( file.path( path.expand( "~" ) , "CPSASEC" , paste(2017,"cps asec.rds") ) )
codes<-read.csv('/Users/rorr/Desktop/Welfare_Policy/Data/Data_Explorations/Immigration/CPS_Appendix-H(CountryCodes).csv')
keeps <- c("Code", "Country")
codes<- codes[ , keeps, drop = FALSE]
# Generational Immmigration Dynamics
library(survey)				# load survey package (analyzes complex design surveys)
library(reshape2)
library(plyr)
library(openxlsx)
library(Hmisc)
codes=read.csv('/Users/rorr/Desktop/Welfare_Policy/Data/Data_Explorations/Immigration/CPS_Appendix-H(CountryCodes).csv')
refugee_admin=read.xlsx('/Users/rorr/Desktop/Welfare_Policy/Data/Data_Explorations/Immigration/Refugees/LPRRefugees-Final.xlsx')
str(refugee_admin)
#test=cleanme(refugee_admin)
#pop_68 = peinusyr >= 4
x=readRDS( file.path( path.expand( "~" ),"CPSASEC",paste(2017,"cps asec.rds") ) )
immigrant_dads<- subset(x, a_sex == 1 & a_age > 18 & prcitshp >= 4 , select = c(h_seq , a_lineno))
immigrant_moms<- subset(x, a_sex == 2 & a_age > 18 & prcitshp >= 4 , select = c(h_seq , a_lineno))
noncitizen_dads<- subset(x, a_sex == 1 & a_age > 18 & prcitshp >= 5 , select = c(h_seq , a_lineno))
noncitizen_moms<- subset(x, a_sex == 2 & a_age > 18 & prcitshp >= 5 , select = c(h_seq , a_lineno))
kids<- subset(x, a_age < 19, select = c(h_seq , a_lineno , prcitshp, pelndad, pelnmom))
immigrant_moms$i_mom_match <- 1
immigrant_dads$i_dad_match <- 1
noncitizen_moms$mom_match <- 1
noncitizen_dads$dad_match <- 1
before_nrow <- nrow( kids )
kids <- merge( kids , noncitizen_moms , all.x = T, by.x =c( "h_seq","pelnmom"),by.y = c( "h_seq" , "a_lineno" ) )
kids <- merge( kids , noncitizen_dads , all.x = T, by.x =c( "h_seq","pelndad"),by.y = c( "h_seq" , "a_lineno" ) )
stopifnot( nrow( kids ) == before_nrow )
kids$either_parent_noncitizen <- as.numeric( kids$mom_match %in% 1 | kids$dad_match %in% 1 )
before_nrow <- nrow( x )
x <- merge( x , kids , all.x = TRUE )
x[ is.na( x$either_parent_noncitizen ) , 'either_parent_noncitizen' ] <- 0
stopifnot( nrow( x ) == before_nrow )
kids<- subset(x, a_age < 19, select = c(h_seq , a_lineno , prcitshp, pelndad, pelnmom))
before_nrow <- nrow( kids )
kids <- merge( kids , immigrant_moms , all.x = T, by.x =c( "h_seq","pelnmom"),by.y = c( "h_seq" , "a_lineno" ) )
kids <- merge( kids , immigrant_dads , all.x = T, by.x =c( "h_seq","pelndad"),by.y = c( "h_seq" , "a_lineno" ) )
stopifnot( nrow( kids ) == before_nrow )
kids$either_parent_immigrant <- as.numeric( kids$i_mom_match %in% 1 | kids$i_dad_match %in% 1 )
before_nrow <- nrow( x )
x <- merge( x , kids , all.x = TRUE )
x[ is.na( x$either_parent_immigrant ) , 'either_parent_immigrant' ] <- 0
stopifnot( nrow( x ) == before_nrow )
table( x$either_parent_immigrant )
z <-svrepdesign(weights = ~marsupwt,
repweights = "pwwgt[1-9]",
type = "Fay",
rho = (1-1/sqrt(4)),
data = x ,
combined.weights = T)
View(z)
View(z)
survey <-svrepdesign(weights = ~marsupwt,
repweights = "pwwgt[1-9]",
type = "Fay",
rho = (1-1/sqrt(4)),
data = x ,
combined.weights = T)
ASEC_2017 <-svrepdesign(weights = ~marsupwt,
repweights = "pwwgt[1-9]",
type = "Fay",
rho = (1-1/sqrt(4)),
data = x ,
combined.weights = T)
View(ASEC_2017)
install.packages(c("eurostat", "future", "Rcpp"))
# Google Analytics
setwd("~/Desktop/Welfare_Policy/Data/Data_Explorations/Google_Analytics(Cato)")
# Fonts
library(extrafont)
font_import()
getwd()
# My Packages
library(googleAnalyticsR)
library(tidyverse)
library(httr)
library(RCurl)
library(XML)
library(foreach)
library(stringr)
library(ggplot2)
library(data.table)
library(stringdist)
library(pbmcapply)
library(openxlsx)
#library(plyr)
## Define Functions ##
##########################################################################################
###################################### Begin script ######################################
##########################################################################################
# Define Date
current_date=format(Sys.time(), "%Y-%m-%d")
current_date=as.Date(current_date)
# Open Google Analytics
account_list <- ga_account_list()
ga_id <- account_list$viewId[1]
cato_scholars=read.xlsx('Cato_Scholars.xlsx')
# Choose person(s) of interest
targets = cato_scholars %>% filter(str_detect(name.website, 'Vanessa'))
name=targets$name.website
name=as.character(name)
last_name=str_extract(name,'[^ ]+$')
authur_row=as.data.frame(cato_scholars$name.website)
colnames(authur_row) = authur_row[1, ] # the first row will be the header
authur_row = authur_row[-1, ]          # removing the first row.
authur_row=as.vector(as.character(authur_row))
# view id of your Google Analytics view where 1 conversion = visit
vid <- "3016983"
# Establish date range
from <- "2014-06-30" # (Earliest Available)
#from <- "2018-07-01" # (Insert Other)
to   <- as.character(current_date)
#### create filters on dimensions ####
dimf <- dim_filter("dimension1","PARTIAL", expressions=name,not = F, caseSensitive = F)
dimf2 <- dim_filter("countryIsoCode","EXACT","US",not = F)
fc2 <- filter_clause_ga4(list(# dimf #,dimf2
), operator = "OR")
#### Construct File Name ####
from_s = (from)
from_m = as.character(from)
from_y=str_sub(from, start=3, end = 4)
from_m=str_sub(from, start=6, end = 7)
to_y=str_sub(to, start=3, end = 4)
to_m=str_sub(to, start=6, end = 7)
analysis_range=paste0("(",from_m,from_y,'-',to_m,to_y,")")
initials <- function(a, b){
a <- str_split(a, "&")
a1 <- lapply(a, function(x){
x1 <- str_split(str_trim(x), " ")
paste0(unlist(lapply(x1, str_sub, 1, 2)), collapse="")	})
paste0(unlist(a1), b) }
analysis_identifier=initials(name,analysis_range)
#### Specify Search terms ####
max = 500000000
met = c("sessions", #"pageviews",
'timeOnPage','avgTimeOnPage',
"entrances","bounces", 'exitRate')
dim = c("date",
"ga:dimension1", #'channelGrouping',# 'city', 'region',
#'ga:dimension2',
'pagePath')
load( file = "Big_Cleaned_DAT.RData")
#####################################################
################ Scrape Cato Web Data ###############
#####################################################
#df_final= data.frame()
df1$ID <- seq.int(nrow(df1))
url_vector_full=df1[["pagePath"]]
url_vector=unique(url_vector_full)
split_url_vector = split(url_vector, ceiling(seq_along(url_vector)/5000))
split_1=split_url_vector[[1]]
split_2=split_url_vector[[2]]
split_3=split_url_vector[[3]]
split_4=split_url_vector[[4]]
split_5=split_url_vector[[5]]
split_6=split_url_vector[[6]]
split_7=split_url_vector[[7]]
split_8=split_url_vector[[8]]
split_9=split_url_vector[[9]]
split_10=split_url_vector[[10]]
split_11=split_url_vector[[11]]
split_12=split_url_vector[[12]]
split_13=split_url_vector[[13]]
SafeGet = function (x)	{
tryCatch({
#	short_url_vector
html=GET(x)
parsed=htmlParse(html)
root=xmlRoot(parsed)
title = xpathSApply(root, "//h1[@class='page-h1'][1]", xmlValue)
return(title)},
error=function(e){cat("ERROR :", conditionMessage(e))}, '0')}
responses_1 <- pbmclapply(split_1, SafeGet, mc.preschedule=T)
