noncitizen_moms_70_family$mom_match_70_family=1
noncitizen_dads_70_family$dad_match_70_family=1
noncitizen_moms_early_family$mom_match_early_family=1
noncitizen_dads_early_family$dad_match_early_family=1
before_nrow=nrow(kids_young_family)
before_nrow_adult=nrow(gen1_adult_family)
kids_young_family=merge(kids_young_family,noncitizen_moms_70_family,all.x=T,by.x=c("pf_seq","pelnmom"),by.y =c("pf_seq","a_lineno"))
kids_young_family=merge(kids_young_family,noncitizen_dads_70_family,all.x=T,by.x=c("pf_seq","pelndad"),by.y =c("pf_seq","a_lineno"))
kids_young_family=merge(kids_young_family,noncitizen_moms_early_family,all.x=T,by.x=c("pf_seq","pelnmom"),by.y=c("pf_seq","a_lineno"))
kids_young_family=merge(kids_young_family,noncitizen_dads_early_family,all.x=T,by.x=c("pf_seq","pelndad"),by.y=c("pf_seq","a_lineno"))
gen1_adult_family=subset(x, a_age >= 19 & prcitshp < 4,select=c(pf_seq ,a_lineno,prcitshp, pelndad, pelnmom))
# Split up kids due to memory limits (9 and younger & older than 9)
kids_older_family1=subset(x,a_age > 9 & a_age < 15 & prcitshp < 4, select = c(pf_seq,a_lineno,prcitshp, pelndad, pelnmom))
kids_older_family2=subset(x,a_age > 15 & a_age < 19 & prcitshp < 4, select = c(pf_seq,a_lineno,prcitshp, pelndad, pelnmom))
# Split up kids due to memory limits (9 and younger & older than 9)
kids_young_family1=subset(x, a_age <= 5 & prcitshp < 4, select = c(pf_seq,a_lineno,prcitshp, pelndad, pelnmom))
kids_young_family2=subset(x, a_age > 5 & a_age <= 9 & prcitshp < 4, select = c(pf_seq,a_lineno,prcitshp, pelndad, pelnmom))
#Mark the adults based on matching characteristics
noncitizen_moms_70_family$mom_match_70_family=1
noncitizen_dads_70_family$dad_match_70_family=1
noncitizen_moms_early_family$mom_match_early_family=1
noncitizen_dads_early_family$dad_match_early_family=1
before_nrow_young=nrow(kids_young_family1)
before_nrow_older=nrow(kids_older_family)
# Adult
before_nrow_adult=nrow(gen1_adult_family)
# Split up kids due to memory limits (9 and younger & older than 9)
kids_older_family1=subset(x,a_age > 9 & a_age < 15 & prcitshp < 4, select = c(pf_seq,a_lineno,prcitshp, pelndad, pelnmom))
kids_older_family2=subset(x,a_age > 15 & a_age < 19 & prcitshp < 4, select = c(pf_seq,a_lineno,prcitshp, pelndad, pelnmom))
# Split up kids due to memory limits (9 and younger & older than 9)
kids_young_family1=subset(x, a_age <= 5 & prcitshp < 4, select = c(pf_seq,a_lineno,prcitshp, pelndad, pelnmom))
kids_young_family2=subset(x, a_age > 5 & a_age <= 9 & prcitshp < 4, select = c(pf_seq,a_lineno,prcitshp, pelndad, pelnmom))
#Mark the adults based on matching characteristics
noncitizen_moms_70_family$mom_match_70_family=1
noncitizen_dads_70_family$dad_match_70_family=1
noncitizen_moms_early_family$mom_match_early_family=1
noncitizen_dads_early_family$dad_match_early_family=1
before_nrow_young=nrow(kids_young_family1)
before_nrow_older=nrow(kids_older_family)
# Adult
before_nrow_adult=nrow(gen1_adult_family)
# Merge Youngest Kidos
kids_young_family1=merge(kids_young_family1,noncitizen_moms_70_family,all.x=T,by.x=c("pf_seq","pelnmom"),by.y =c("pf_seq","a_lineno"))
kids_young_family1=merge(kids_young_family1,noncitizen_dads_70_family,all.x=T,by.x=c("pf_seq","pelndad"),by.y =c("pf_seq","a_lineno"))
kids_young_family1=merge(kids_young_family1,noncitizen_moms_early_family,all.x=T,by.x=c("pf_seq","pelnmom"),by.y=c("pf_seq","a_lineno"))
kids_young_family1=merge(kids_young_family1,noncitizen_dads_early_family,all.x=T,by.x=c("pf_seq","pelndad"),by.y=c("pf_seq","a_lineno"))
# Generate subsets for based on gender and immigration status for parents + offspring(kids & adults)
noncitizen_moms_70_family=subset(x, a_sex == 2 & a_age > 18 & prcitshp <= 4 & peinusyr >= 5, select = c(pf_seq,a_lineno))
noncitizen_dads_70_family=subset(x, a_sex == 1 & a_age > 18 & prcitshp <= 4 & peinusyr >= 5, select = c(pf_seq,a_lineno))
noncitizen_moms_early_family=subset(x, a_sex == 2 & a_age > 18 & peinusyr < 5 & prcitshp <= 4, select = c(pf_seq,a_lineno))
noncitizen_dads_early_family=subset(x, a_sex == 1 & a_age > 18 & peinusyr < 5 & prcitshp <= 4, select = c(pf_seq,a_lineno))
# Easy? Adults
gen1_adult_family=subset(x, a_age >= 19 & prcitshp < 4,select=c(pf_seq ,a_lineno,prcitshp, pelndad, pelnmom))
# Split up kids due to memory limits (9 and younger & older than 9)
kids_older_family1=subset(x,a_age > 9 & a_age < 15 & prcitshp < 4, select = c(pf_seq,a_lineno,prcitshp, pelndad, pelnmom))
kids_older_family2=subset(x,a_age > 15 & a_age < 19 & prcitshp < 4, select = c(pf_seq,a_lineno,prcitshp, pelndad, pelnmom))
# Split up kids due to memory limits (9 and younger & older than 9)
kids_young_family1=subset(x, a_age <= 2 & prcitshp < 4, select = c(pf_seq,a_lineno,prcitshp, pelndad, pelnmom))
kids_young_family2=subset(x, a_age > 2 & a_age <= 5 & prcitshp < 4, select = c(pf_seq,a_lineno,prcitshp, pelndad, pelnmom))
kids_young_family2=subset(x, a_age > 5 & a_age <= 7 & prcitshp < 4, select = c(pf_seq,a_lineno,prcitshp, pelndad, pelnmom))
kids_young_family4=subset(x, a_age > 7 & a_age <= 9 & prcitshp < 4, select = c(pf_seq,a_lineno,prcitshp, pelndad, pelnmom))
#Mark the adults based on matching characteristics
noncitizen_moms_70_family$mom_match_70_family=1
noncitizen_dads_70_family$dad_match_70_family=1
noncitizen_moms_early_family$mom_match_early_family=1
noncitizen_dads_early_family$dad_match_early_family=1
before_nrow_young=nrow(kids_young_family1)
before_nrow_older=nrow(kids_older_family)
# Adult
before_nrow_adult=nrow(gen1_adult_family)
# Merge Youngest Kidos
kids_young_family1=merge(kids_young_family1,noncitizen_moms_70_family,all.x=T,by.x=c("pf_seq","pelnmom"),by.y =c("pf_seq","a_lineno"))
kids_young_family1=merge(kids_young_family1,noncitizen_dads_70_family,all.x=T,by.x=c("pf_seq","pelndad"),by.y =c("pf_seq","a_lineno"))
kids_young_family1=merge(kids_young_family1,noncitizen_moms_early_family,all.x=T,by.x=c("pf_seq","pelnmom"),by.y=c("pf_seq","a_lineno"))
kids_young_family1=merge(kids_young_family1,noncitizen_dads_early_family,all.x=T,by.x=c("pf_seq","pelndad"),by.y=c("pf_seq","a_lineno"))
# Merge Younger Kidos
kids_young_family2=merge(kids_young_family2,noncitizen_moms_70_family,all.x=T,by.x=c("pf_seq","pelnmom"),by.y =c("pf_seq","a_lineno"))
kids_young_family2=merge(kids_young_family2,noncitizen_dads_70_family,all.x=T,by.x=c("pf_seq","pelndad"),by.y =c("pf_seq","a_lineno"))
kids_young_family2=merge(kids_young_family2,noncitizen_moms_early_family,all.x=T,by.x=c("pf_seq","pelnmom"),by.y=c("pf_seq","a_lineno"))
kids_young_family2=merge(kids_young_family2,noncitizen_dads_early_family,all.x=T,by.x=c("pf_seq","pelndad"),by.y=c("pf_seq","a_lineno"))
# Merge older Young Kidos
kids_young_family3=merge(kids_young_family3,noncitizen_moms_70_family,all.x=T,by.x=c("pf_seq","pelnmom"),by.y =c("pf_seq","a_lineno"))
kids_young_family3=merge(kids_young_family3,noncitizen_dads_70_family,all.x=T,by.x=c("pf_seq","pelndad"),by.y =c("pf_seq","a_lineno"))
kids_young_family3=merge(kids_young_family3,noncitizen_moms_early_family,all.x=T,by.x=c("pf_seq","pelnmom"),by.y=c("pf_seq","a_lineno"))
kids_young_family3=merge(kids_young_family3,noncitizen_dads_early_family,all.x=T,by.x=c("pf_seq","pelndad"),by.y=c("pf_seq","a_lineno"))
# Merge olderst young Kidos
kids_young_family4=merge(kids_young_family4,noncitizen_moms_70_family,all.x=T,by.x=c("pf_seq","pelnmom"),by.y =c("pf_seq","a_lineno"))
kids_young_family4=merge(kids_young_family4,noncitizen_dads_70_family,all.x=T,by.x=c("pf_seq","pelndad"),by.y =c("pf_seq","a_lineno"))
kids_young_family4=merge(kids_young_family4,noncitizen_moms_early_family,all.x=T,by.x=c("pf_seq","pelnmom"),by.y=c("pf_seq","a_lineno"))
kids_young_family4=merge(kids_young_family4,noncitizen_dads_early_family,all.x=T,by.x=c("pf_seq","pelndad"),by.y=c("pf_seq","a_lineno"))
x=readRDS( file.path( path.expand( "~" ),"CPSASEC",paste(2017,"cps asec.rds") ) )
# Generate subsets for based on gender and immigration status for parents + offspring(kids & adults)
noncitizen_moms_70_family=subset(x, a_sex == 2 & a_age > 18 & prcitshp <= 4 & peinusyr >= 5, select = c(pf_seq,a_lineno))
noncitizen_dads_70_family=subset(x, a_sex == 1 & a_age > 18 & prcitshp <= 4 & peinusyr >= 5, select = c(pf_seq,a_lineno))
noncitizen_moms_early_family=subset(x, a_sex == 2 & a_age > 18 & peinusyr < 5 & prcitshp <= 4, select = c(pf_seq,a_lineno))
noncitizen_dads_early_family=subset(x, a_sex == 1 & a_age > 18 & peinusyr < 5 & prcitshp <= 4, select = c(pf_seq,a_lineno))
# Easy? Adults
gen1_adult_family=subset(x, a_age >= 19 & prcitshp < 4,select=c(pf_seq ,a_lineno,prcitshp, pelndad, pelnmom))
# Split up kids due to memory limits (9 and younger & older than 9)
kids_older_family1=subset(x,a_age > 9 & a_age < 15 & prcitshp < 4, select = c(pf_seq,a_lineno,prcitshp, pelndad, pelnmom))
kids_older_family2=subset(x,a_age > 15 & a_age < 19 & prcitshp < 4, select = c(pf_seq,a_lineno,prcitshp, pelndad, pelnmom))
# Split up kids due to memory limits (9 and younger & older than 9)
kids_young_family1=subset(x, a_age <= 2 & prcitshp < 4, select = c(pf_seq,a_lineno,prcitshp, pelndad, pelnmom))
kids_young_family2=subset(x, a_age > 2 & a_age <= 5 & prcitshp < 4, select = c(pf_seq,a_lineno,prcitshp, pelndad, pelnmom))
kids_young_family2=subset(x, a_age > 5 & a_age <= 7 & prcitshp < 4, select = c(pf_seq,a_lineno,prcitshp, pelndad, pelnmom))
kids_young_family4=subset(x, a_age > 7 & a_age <= 9 & prcitshp < 4, select = c(pf_seq,a_lineno,prcitshp, pelndad, pelnmom))
#Mark the adults based on matching characteristics
noncitizen_moms_70_family$mom_match_70_family=1
noncitizen_dads_70_family$dad_match_70_family=1
noncitizen_moms_early_family$mom_match_early_family=1
noncitizen_dads_early_family$dad_match_early_family=1
before_nrow_young=nrow(kids_young_family1)
before_nrow_older=nrow(kids_older_family)
# Adult
before_nrow_adult=nrow(gen1_adult_family)
# Merge Youngest Kidos
kids_young_family1=merge(kids_young_family1,noncitizen_moms_70_family,all.x=T,by.x=c("pf_seq","pelnmom"),by.y =c("pf_seq","a_lineno"))
kids_young_family1=merge(kids_young_family1,noncitizen_dads_70_family,all.x=T,by.x=c("pf_seq","pelndad"),by.y =c("pf_seq","a_lineno"))
kids_young_family1=merge(kids_young_family1,noncitizen_moms_early_family,all.x=T,by.x=c("pf_seq","pelnmom"),by.y=c("pf_seq","a_lineno"))
kids_young_family1=merge(kids_young_family1,noncitizen_dads_early_family,all.x=T,by.x=c("pf_seq","pelndad"),by.y=c("pf_seq","a_lineno"))
# Merge Younger Kidos
kids_young_family2=merge(kids_young_family2,noncitizen_moms_70_family,all.x=T,by.x=c("pf_seq","pelnmom"),by.y =c("pf_seq","a_lineno"))
kids_young_family2=merge(kids_young_family2,noncitizen_dads_70_family,all.x=T,by.x=c("pf_seq","pelndad"),by.y =c("pf_seq","a_lineno"))
# Generate subsets for based on gender and immigration status for parents + offspring(kids & adults)
noncitizen_moms_70_family=subset(x, a_sex == 2 & a_age > 18 & prcitshp <= 4 & peinusyr >= 5, select = c(pf_seq,a_lineno,h_seq))
noncitizen_dads_70_family=subset(x, a_sex == 1 & a_age > 18 & prcitshp <= 4 & peinusyr >= 5, select = c(pf_seq,a_lineno,h_seq))
noncitizen_moms_early_family=subset(x, a_sex == 2 & a_age > 18 & peinusyr < 5 & prcitshp <= 4, select = c(pf_seq,a_lineno,h_seq))
noncitizen_dads_early_family=subset(x, a_sex == 1 & a_age > 18 & peinusyr < 5 & prcitshp <= 4, select = c(pf_seq,a_lineno,h_seq))
# Easy? Adults
gen1_adult_family=subset(x, a_age >= 19 & prcitshp < 4,select=c(pf_seq ,a_lineno,prcitshp, pelndad, pelnmom))
# Split up kids due to memory limits (9 and younger & older than 9)
kids_older_family1=subset(x,a_age > 9 & a_age < 15 & prcitshp < 4, select = c(pf_seq,a_lineno,prcitshp, pelndad, pelnmom, h_seq))
kids_older_family2=subset(x,a_age > 15 & a_age < 19 & prcitshp < 4, select = c(pf_seq,a_lineno,prcitshp, pelndad, pelnmom, h_seq))
# Split up kids due to memory limits (9 and younger & older than 9)
kids_young_family1=subset(x, a_age <= 2 & prcitshp < 4, select = c(pf_seq,a_lineno,prcitshp, pelndad, pelnmom, h_seq))
kids_young_family2=subset(x, a_age > 2 & a_age <= 5 & prcitshp < 4, select = c(pf_seq,a_lineno,prcitshp, pelndad, pelnmom, h_seq))
kids_young_family2=subset(x, a_age > 5 & a_age <= 7 & prcitshp < 4, select = c(pf_seq,a_lineno,prcitshp, pelndad, pelnmom, h_seq))
kids_young_family4=subset(x, a_age > 7 & a_age <= 9 & prcitshp < 4, select = c(pf_seq,a_lineno,prcitshp, pelndad, pelnmom, h_seq))
#Mark the adults based on matching characteristics
noncitizen_moms_70_family$mom_match_70_family=1
noncitizen_dads_70_family$dad_match_70_family=1
noncitizen_moms_early_family$mom_match_early_family=1
noncitizen_dads_early_family$dad_match_early_family=1
before_nrow_young=nrow(kids_young_family1)
before_nrow_older=nrow(kids_older_family)
# Adult
before_nrow_adult=nrow(gen1_adult_family)
# Merge Youngest Kidos
kids_young_family1=merge(kids_young_family1,noncitizen_moms_70_family,all.x=T,by.x=c("pf_seq","pelnmom"),by.y =c("pf_seq","a_lineno"))
kids_young_family1=merge(kids_young_family1,noncitizen_dads_70_family,all.x=T,by.x=c("pf_seq","pelndad"),by.y =c("pf_seq","a_lineno"))
kids_young_family1=subset(x, a_age <= 2 & prcitshp < 4, select = c(pf_seq,a_lineno,prcitshp, pelndad, pelnmom, h_seq))
kids_young_family2=subset(x, a_age > 2 & a_age <= 4 & prcitshp < 4, select = c(pf_seq,a_lineno,prcitshp, pelndad, pelnmom, h_seq))
# Generate subsets for based on gender and immigration status for parents + offspring(kids & adults)
noncitizen_moms_70_family=subset(x, a_sex == 2 & a_age > 18 & prcitshp <= 4 & peinusyr >= 5, select = c(pf_seq,a_lineno))
noncitizen_dads_70_family=subset(x, a_sex == 1 & a_age > 18 & prcitshp <= 4 & peinusyr >= 5, select = c(pf_seq,a_lineno))
noncitizen_moms_early_family=subset(x, a_sex == 2 & a_age > 18 & peinusyr < 5 & prcitshp <= 4, select = c(pf_seq,a_lineno))
noncitizen_dads_early_family=subset(x, a_sex == 1 & a_age > 18 & peinusyr < 5 & prcitshp <= 4, select = c(pf_seq,a_lineno))
# Easy? Adults
gen1_adult_family=subset(x, a_age >= 19,select=c(pf_seq ,a_lineno,prcitshp, pelndad, pelnmom))
# Split up kids due to memory limits (9 and younger & older than 9)
kids_older_family1=subset(x,a_age > 9 & a_age < 15, select = c(pf_seq,a_lineno,prcitshp, pelndad, pelnmom))
kids_older_family2=subset(x,a_age > 15 & a_age < 19, select = c(pf_seq,a_lineno,prcitshp, pelndad, pelnmom))
# Split up kids due to memory limits (9 and younger & older than 9)
kids_young_family1=subset(x, a_age <= 2, select = c(pf_seq,a_lineno,prcitshp, pelndad, pelnmom))
kids_young_family2=subset(x, a_age > 2 & a_age <= 4, select = c(pf_seq,a_lineno, pelndad, pelnmom))
kids_young_family2=subset(x, a_age > 4 & a_age <= 7, select = c(pf_seq,a_lineno, pelndad, pelnmom))
kids_young_family4=subset(x, a_age > 7 & a_age <= 9, select = c(pf_seq,a_lineno, pelndad, pelnmom))
#Mark the adults based on matching characteristics
noncitizen_moms_70_family$mom_match_70_family=1
noncitizen_dads_70_family$dad_match_70_family=1
noncitizen_moms_early_family$mom_match_early_family=1
noncitizen_dads_early_family$dad_match_early_family=1
before_nrow_young=nrow(kids_young_family1)
before_nrow_older=nrow(kids_older_family)
# Adult
before_nrow_adult=nrow(gen1_adult_family)
# Merge Youngest Kidos
kids_young_family1=merge(kids_young_family1,noncitizen_moms_70_family,all.x=T,by.x=c("pf_seq","pelnmom"),by.y =c("pf_seq","a_lineno"))
kids_young_family1=merge(kids_young_family1,noncitizen_dads_70_family,all.x=T,by.x=c("pf_seq","pelndad"),by.y =c("pf_seq","a_lineno"))
kids_young_family1=merge(kids_young_family1,noncitizen_moms_early_family,all.x=T,by.x=c("pf_seq","pelnmom"),by.y=c("pf_seq","a_lineno"))
kids_young_family1=merge(kids_young_family1,noncitizen_dads_early_family,all.x=T,by.x=c("pf_seq","pelndad"),by.y=c("pf_seq","a_lineno"))
# Generate subsets for based on gender and immigration status for parents + offspring(kids & adults)
noncitizen_moms_70_family=subset(x, a_sex == 2 & a_age > 18 & prcitshp <= 4 & peinusyr >= 5, select = c(ffpos,a_lineno))
noncitizen_dads_70_family=subset(x, a_sex == 1 & a_age > 18 & prcitshp <= 4 & peinusyr >= 5, select = c(ffpos,a_lineno))
noncitizen_moms_early_family=subset(x, a_sex == 2 & a_age > 18 & peinusyr < 5 & prcitshp <= 4, select = c(ffpos,a_lineno))
noncitizen_dads_early_family=subset(x, a_sex == 1 & a_age > 18 & peinusyr < 5 & prcitshp <= 4, select = c(ffpos,a_lineno))
# Easy? Adults
gen1_adult_family=subset(x, a_age >= 19,select=c(ffpos ,a_lineno,prcitshp, pelndad, pelnmom))
# Split up kids due to memory limits (9 and younger & older than 9)
kids_older_family1=subset(x,a_age > 9 & a_age < 15, select = c(ffpos,a_lineno,prcitshp, pelndad, pelnmom))
kids_older_family2=subset(x,a_age > 15 & a_age < 19, select = c(ffpos,a_lineno,prcitshp, pelndad, pelnmom))
# Split up kids due to memory limits (9 and younger & older than 9)
kids_young_family1=subset(x, a_age <= 2, select = c(ffpos,a_lineno,prcitshp, pelndad, pelnmom))
kids_young_family2=subset(x, a_age > 2 & a_age <= 4, select = c(ffpos,a_lineno, pelndad, pelnmom))
kids_young_family2=subset(x, a_age > 4 & a_age <= 7, select = c(ffpos,a_lineno, pelndad, pelnmom))
kids_young_family4=subset(x, a_age > 7 & a_age <= 9, select = c(ffpos,a_lineno, pelndad, pelnmom))
#Mark the adults based on matching characteristics
noncitizen_moms_70_family$mom_match_70_family=1
noncitizen_dads_70_family$dad_match_70_family=1
noncitizen_moms_early_family$mom_match_early_family=1
noncitizen_dads_early_family$dad_match_early_family=1
before_nrow_young=nrow(kids_young_family1)
before_nrow_older=nrow(kids_older_family)
# Adult
before_nrow_adult=nrow(gen1_adult_family)
# Merge Youngest Kidos
kids_young_family1=merge(kids_young_family1,noncitizen_moms_70_family,all.x=T,by.x=c("ffpos","pelnmom"),by.y =c("ffpos","a_lineno"))
kids_young_family1=merge(kids_young_family1,noncitizen_dads_70_family,all.x=T,by.x=c("ffpos","pelndad"),by.y =c("ffpos","a_lineno"))
kids_young_family1=merge(kids_young_family1,noncitizen_moms_early_family,all.x=T,by.x=c("ffpos","pelnmom"),by.y=c("ffpos","a_lineno"))
kids_young_family1=merge(kids_young_family1,noncitizen_dads_early_family,all.x=T,by.x=c("ffpos","pelndad"),by.y=c("ffpos","a_lineno"))
# Generate subsets for based on gender and immigration status for parents + offspring(kids & adults)
noncitizen_moms_70_family=subset(x, a_sex == 2 & a_age > 18 & prcitshp <= 4 & peinusyr >= 5, select = c(ffpos,a_lineno))
noncitizen_dads_70_family=subset(x, a_sex == 1 & a_age > 18 & prcitshp <= 4 & peinusyr >= 5, select = c(ffpos,a_lineno))
noncitizen_moms_early_family=subset(x, a_sex == 2 & a_age > 18 & peinusyr < 5 & prcitshp <= 4, select = c(ffpos,a_lineno))
noncitizen_dads_early_family=subset(x, a_sex == 1 & a_age > 18 & peinusyr < 5 & prcitshp <= 4, select = c(ffpos,a_lineno))
# Easy? Adults
gen1_adult_family=subset(x, a_age >= 19,select=c(ffpos ,a_lineno,prcitshp, pelndad, pelnmom))
# Split up kids due to memory limits (9 and younger & older than 9)
kids_older_family1=subset(x,a_age > 9 & a_age < 15, select = c(ffpos,a_lineno,prcitshp, pelndad, pelnmom))
kids_older_family2=subset(x,a_age > 15 & a_age < 19, select = c(ffpos,a_lineno,prcitshp, pelndad, pelnmom))
# Split up kids due to memory limits (9 and younger & older than 9)
kids_young_family1=subset(x, a_age <= 2, select = c(ffpos,a_lineno,prcitshp, pelndad, pelnmom))
kids_young_family2=subset(x, a_age > 2 & a_age <= 4, select = c(ffpos,a_lineno, pelndad, pelnmom))
kids_young_family2=subset(x, a_age > 4 & a_age <= 7, select = c(ffpos,a_lineno, pelndad, pelnmom))
kids_young_family4=subset(x, a_age > 7 & a_age <= 9, select = c(ffpos,a_lineno, pelndad, pelnmom))
#Mark the adults based on matching characteristics
noncitizen_moms_70_family$mom_match_70_family=1
noncitizen_dads_70_family$dad_match_70_family=1
noncitizen_moms_early_family$mom_match_early_family=1
noncitizen_dads_early_family$dad_match_early_family=1
before_nrow_young=nrow(kids_young_family1)
before_nrow_older=nrow(kids_older_family)
# Adult
before_nrow_adult=nrow(gen1_adult_family)
# Merge Youngest Kidos
kids_young_family1=merge(kids_young_family1,noncitizen_moms_70_family,all.x=T,by.x=c("ffpos","pelnmom"),by.y =c("ffpos","a_lineno"))
kids_young_family1=merge(kids_young_family1,noncitizen_dads_70_family,all.x=T,by.x=c("ffpos","pelndad"),by.y =c("ffpos","a_lineno"))
kids_young_family1=merge(kids_young_family1,noncitizen_moms_early_family,all.x=T,by.x=c("ffpos","pelnmom"),by.y=c("ffpos","a_lineno"))
kids_young_family1=merge(kids_young_family1,noncitizen_dads_early_family,all.x=T,by.x=c("ffpos","pelndad"),by.y=c("ffpos","a_lineno"))
# Generate subsets for based on gender and immigration status for parents + offspring(kids & adults)
noncitizen_moms_70_family=subset(x, a_sex == 2 & a_age > 18 & prcitshp <= 4 & peinusyr >= 5, select = c(ffpos, pf_seq,a_lineno))
noncitizen_dads_70_family=subset(x, a_sex == 1 & a_age > 18 & prcitshp <= 4 & peinusyr >= 5, select = c(ffpos, pf_seq,a_lineno))
noncitizen_moms_early_family=subset(x, a_sex == 2 & a_age > 18 & peinusyr < 5 & prcitshp <= 4, select = c(ffpos, pf_seq,a_lineno))
noncitizen_dads_early_family=subset(x, a_sex == 1 & a_age > 18 & peinusyr < 5 & prcitshp <= 4, select = c(ffpos, pf_seq,a_lineno))
# Easy? Adults
gen1_adult_family=subset(x, a_age >= 19,select=c(ffpos, pf_seq ,a_lineno,prcitshp, pelndad, pelnmom))
# Split up kids due to memory limits (9 and younger & older than 9)
kids_older_family1=subset(x,a_age > 9 & a_age < 15, select = c(ffpos, pf_seq,a_lineno,prcitshp, pelndad, pelnmom))
kids_older_family2=subset(x,a_age > 15 & a_age < 19, select = c(ffpos, pf_seq,a_lineno,prcitshp, pelndad, pelnmom))
# Split up kids due to memory limits (9 and younger & older than 9)
kids_young_family1=subset(x, a_age <= 2, select = c(ffpos, pf_seq,a_lineno,prcitshp, pelndad, pelnmom))
kids_young_family2=subset(x, a_age > 2 & a_age <= 4, select = c(ffpos, pf_seq,a_lineno, pelndad, pelnmom))
kids_young_family2=subset(x, a_age > 4 & a_age <= 7, select = c(ffpos, pf_seq,a_lineno, pelndad, pelnmom))
kids_young_family4=subset(x, a_age > 7 & a_age <= 9, select = c(ffpos, pf_seq,a_lineno, pelndad, pelnmom))
#Mark the adults based on matching characteristics
noncitizen_moms_70_family$mom_match_70_family=1
noncitizen_dads_70_family$dad_match_70_family=1
noncitizen_moms_early_family$mom_match_early_family=1
noncitizen_dads_early_family$dad_match_early_family=1
before_nrow_young=nrow(kids_young_family1)
before_nrow_older=nrow(kids_older_family)
# Adult
before_nrow_adult=nrow(gen1_adult_family)
# Merge Youngest Kidos
kids_young_family1=merge(kids_young_family1,noncitizen_moms_70_family,all.x=T,by.x=c("ffpos", "pf_seq","pelnmom"),by.y =c("ffpos", "pf_seq","a_lineno"))
kids_young_family1=merge(kids_young_family1,noncitizen_dads_70_family,all.x=T,by.x=c("ffpos", "pf_seq","pelndad"),by.y =c("ffpos", "pf_seq","a_lineno"))
setwd("~/Desktop/Welfare_Policy/Data/Data_Explorations/Google_Analytics(Cato)")
setwd("~/Desktop/Welfare_Policy/Data/Data_Explorations/Google_Analytics(Cato)")
# Fonts
library(extrafont)
font_import()
getwd()
# My Packages
library(googleAnalyticsR)
library(dplyr)
library(httr)
library(RCurl)
library(XML)
library(foreach)
library(stringr)
library(ggplot2)
#library(lubridate)
#library(data.table)
library(pbmcapply)
#library(plyr)
# Functions
simpleCap <- function(x) {
s <- strsplit(x, " ")[[1]]
if (!is.na(s[1])) {
return(paste(toupper(substring(s, 1, 1)), substring(s, 2), sep = "", collapse = " "))} else {
return(NA)}}
# Define Date
current_date=format(Sys.time(), "%Y-%m-%d")
current_date=as.Date(current_date)
# Open Google Analytics
account_list <- ga_account_list()
ga_id <- account_list$viewId[1]
#
# Setup script
#
name="Alex Nowrasteh"
#name="Michael D. Tanner"
lst <- sapply(stri_extract_all_words(name), function(x) substr(x, 0, 2))
df$ID <- paste0(sapply(lst, function(x) paste(x, collapse = '')), df$Year)
name=as.character(name)
last_name=str_extract(name,'[^ ]+$')
# view id of your Google Analytics view where 1 conversion = visit
vid <- "3016983"
# date range
from <- "2014-07-01"
to   <- as.character(current_date)
## create filters on dimensions
dimf <- dim_filter("dimension1","PARTIAL", expressions=name,not = F, caseSensitive = F)
dimf2 <- dim_filter("countryIsoCode","EXACT","US",not = F)
fc2 <- filter_clause_ga4(list(dimf #,dimf2
), operator = "OR")
# Build file name
from_s = (from)
from_m = as.character(from)
from_y=str_sub(from, start=3, end = 4)
from_m=str_sub(from, start=6, end = 7)
to_y=str_sub(to, start=3, end = 4)
to_m=str_sub(to, start=6, end = 7)
analysis_range=paste0("(",from_m,from_y,'-',to_m,to_y,")")
initials <- function(a, b){
a <- str_split(a, "&")
a1 <- lapply(a, function(x){
x1 <- str_split(str_trim(x), " ")
paste0(unlist(lapply(x1, str_sub, 1, 2)), collapse="")
})
paste0(unlist(a1), b)
}
analysis_identifier=initials(name,analysis_range)
## Specify Search terms
max = 5000000
met = c("sessions",
#"pageviews",
'timeOnPage','avgTimeOnPage',
"entrances","bounces", 'exitRate')
dim = c(
"date",
"ga:dimension1",
#'ga:dimension2',
#'region',
#'city',
'pagePath'
)
# the function
df2 = data.table()
get_data <- function(vid, from, to, dim, met, max) {
df <- google_analytics(viewId = vid, date_range = c(from, to), metrics = met,  dimensions = dim,
#met_filters = fc,
dim_filters = fc2,  max = max	,anti_sample = TRUE)
# clean up and set class
df$dimension1 = gsub('O&#039;Toole', "O'Toole", df$dimension1)
df$author_full=df$dimension1
df$dimension1 <- NULL
df$author=name
df$co_authors = gsub(name, '', df$author_full)
df$co_authors = gsub("^,*|(?<=,),|,*$", "", df$co_authors, perl=T)
df$co_authors=gsub(', , ', ', ', df$co_authors)
df$co_authors=trimws(df$co_authors)
df$collaboration_yn=ifelse(df$author==df$author_full,"Sole Author",
ifelse(df$author!=df$author_full|!is.na(df$co_authors),"Co-Authored",0))
df}
gadata <- get_data(vid=vid, from=from, to=to, dim=dim, met=met, max=max)
save(gadata, file = "Last_Raw_GA_DAT.RData")
#######
load( file = "Last_Raw_GA_DAT.RData")
#str(gadata)
#######
df1 = (gadata)
rm(gadata)
df1$obs_day=as.Date(df1$date)
df1$date<-NULL
#
df1 <- df1[!grepl("search/srpcache", df1$pagePath),]
df1 <- df1[!grepl("www.filterbypass.me", df1$pagePath),]
df1 <- df1[!grepl("wikipedia.org/secure", df1$pagePath),]
df1 <- df1[!grepl("www.googleadservices.com", df1$pagePath),]
df1 <- df1[!grepl("bit.ly", df1$pagePath),]
df1 <- df1[!grepl("j.mp", df1$pagePath),]
df1 <- df1[!grepl("nl.hideproxy.me", df1$pagePath),]
df1 <- df1[!grepl("cc.bingj.com", df1$pagePath),]
df1 <- df1[!grepl("prolegis/getfile", df1$pagePath),]
df1 <- df1[!grepl("cluster23-files.instructure", df1$pagePath),]
df1 <- df1[!grepl("rorr.im/reddit.com", df1$pagePath),]
df1 <- df1[!grepl("www.duplichecker.com", df1$pagePath),]
df1 <- df1[!grepl("copyscape", df1$pagePath),]
df1 <- df1[!grepl("us1.proxysite", df1$pagePath),]
df1 <- df1[!grepl("eveil.alize", df1$pagePath),]
df1$pagePath2= gsub(".*www.cato.org", "www.cato.org", df1$pagePath)
df1$pagePath2= gsub(pattern="[?].*","",x=df1$pagePath2)
df1$pagePath2= gsub(pattern=".*https://*|&.*","",x=df1$pagePath2)
df1$pagePath2= gsub(pattern=".*genius.it/*|&.*",replacement="",x=df1$pagePath2)
df1$pagePath2= gsub(".*www-cato-org","www.cato.org",df1$pagePath2,perl=TRUE)
df1$pagePath2= gsub(".*www.cato.org.*?/publications","www.cato.org/publications",df1$pagePath2,perl=TRUE)
df1$pagePath2= gsub("\\.myaccess.library.utoronto.ca", "", df1$pagePath2, perl=TRUE)
df1$pagePath2= gsub("proxy.earlham.edu", "www.cato.org", df1$pagePath2, perl=TRUE)
df1$pagePath2= gsub("object.cato.org", "www.cato.org", df1$pagePath2, perl=TRUE)
df1$pagePath2= gsub("seekingalpha.com", "www.cato.org", df1$pagePath2, perl=TRUE)
df1$pagePath2= gsub(".ezproxy.wallawalla.edu", "", df1$pagePath2, perl=TRUE)
df1$pagePath2= gsub(".stfi.re", "", df1$pagePath2, perl=TRUE)
df1$pagePath2= gsub(".proxy.lib.pdx.edu", "", df1$pagePath2, perl=TRUE)
df1$pagePath2= gsub("www.cato.org:80", "www.cato.org", df1$pagePath2, perl=TRUE) # Index.html
df1$pagePath2= gsub("www.cato-at-liberty.org", "www.cato.org/blog", df1$pagePath2, perl=TRUE) # Index.html
df1$pagePath2= gsub("index.html", "", df1$pagePath2, perl=TRUE)
df1$pagePath2=gsub("what-have-the-politicians-in-washington-given-us/","what-have-politicians-washington-given-us",df1$pagePath2,perl=TRUE)
df1$pagePath2=ifelse(grepl("php$", df1$pagePath2)==T, df1$pagePath, df1$pagePath2)
refcols <- c("obs_day", 'pagePath', 'pagePath2')
df1 <- df1[, c(refcols, setdiff(names(df1), refcols))]
df1$pagePath1=df1$pagePath
df1$pagePath=df1$pagePath2
df1$pagePath2=NULL
# fake=unique(df1[df1$pagePath2 != df1$pagePath, c("pagePath2", "pagePath")])
# deduped.data = fake[!duplicated(fake$pagePath2),]
df_final= data.table()
web_df= data.table()
df1$ID <- seq.int(nrow(df1))
url_vector=df1[["pagePath"]]
responses <- pbmclapply(url_vector, GET)
title = pbmclapply(responses, function (filename) {
doc = htmlParse(filename)
plain_text = xpathSApply(doc, "//h1[@class='page-h1'][1]", xmlValue)})
web_df=data.frame(cbind(title=title))
df_intermediate <- cbind(df1, web_df)
type_list <- pbmclapply(url_vector, function(url){
type = gsub('www.cato.org*/|/.*', "\\1", url)
type = gsub('-', " ", type)
type_2 = gsub('www.cato.org/publications*/|/.*', "\\1", url)
type_2 = gsub('-', " ", type_2)
type=ifelse((type=="publications"), type_2, type)
})
type_df=data.frame(cbind(type=type_list))
df_intermediate <- cbind(df_intermediate, type_df)
# Extract web content from Cato Website
df3= data.frame()
text_content <- df_intermediate %>%
distinct(pagePath, title, type)
text_content=text_content[!duplicated(text_content),]
text_url_vector=text_content[["pagePath"]]
text_responses <- pbmclapply(text_url_vector, GET)
body_vector = pbmclapply(text_responses, function (filename) {
doc = htmlParse(filename)
body = xpathSApply(doc, "//div[@class='field-body'][1]", xmlValue)
body =  gsub('\nNotes\n.*', '', body)
body =  gsub("\n", ' ', body)
body=trimws(body)})
body_count=pbmclapply(gregexpr("[[:alpha:]]+", body_vector), function(x) sum(x > 0))
pub_date_output = pbmclapply(text_responses, function (filename) {
doc = htmlParse(filename)
pub_date = xpathSApply(doc, "//meta[@name='publication_date'][1]",xmlGetAttr,'content')})
tags_output = pbmclapply(text_responses, function (filename) {
doc = htmlParse(filename)
tags = xpathSApply(doc, "//div[@class='field-tags inline']", xmlValue)
tags =  gsub("\n", ' ', tags)
#tags=(strsplit(tags, '\\,+')[[1]])
tags=trimws((tags))})
topics_output = pbmclapply(text_responses, function (filename) {
doc = htmlParse(filename)
topics = xpathSApply(doc, "//div[@class='field-topics inline']", xmlValue)
topics =  gsub("\n", ' ', topics)
#topics=(strsplit(topics, '\\,+')[[1]])
topics=trimws((topics))})
text_df=data.frame(cbind(body=body_vector,body_count=body_count,topics=topics_output,tags=tags_output,pub_date=pub_date_output ))
text_stats <- cbind(text_content, text_df)
# Text Analysis	- Generate Text Wall
text_wall <- text_df %>%
distinct(title, body,tags)
text_wall=text_wall[!duplicated(text_wall),]
for(i in 1:nrow(text_content)){
if (i==1){save_docs=paste(text_wall$title[i],text_wall$body[i],as.character(text_wall$tags[i]))}
else{save_docs = paste(save_docs,text_wall$title[i],text_wall$body[i],as.character(text_wall$tags[i]))}
}
library(tm)
library(wordcloud)
library(topicmodels)
library(quanteda)
toSpace <- content_transformer(function (x , pattern ) gsub(pattern, " ", x))
toNothing <- content_transformer(function (x , pattern ) gsub(pattern, "", x))
text_stats <- cbind(text_content, df3)
text_stats$row_count = NULL
## Text Analysis - Top Terms ##
for(k in 1:nrow(text_stats)){
keywords_doc = paste(text_stats$title[k],text_stats$body[k],text_stats$tags[k])
keywords_doc=Corpus(VectorSource(keywords_doc))
keywords_doc <- tm_map(keywords_doc, toSpace, "/")
keywords_doc <- tm_map(keywords_doc, toSpace, "@")
keywords_doc <- tm_map(keywords_doc, toSpace, "\\|")
keywords_doc <- tm_map(keywords_doc, toNothing, "-")
keywords_doc <- tm_map(keywords_doc, toNothing, "—")
keywords_doc <- tm_map(keywords_doc, toNothing, "–")
keywords_doc <- tm_map(keywords_doc, removeNumbers)
keywords_doc <- tm_map(keywords_doc, stripWhitespace)
keywords_doc <- tm_map(keywords_doc, removePunctuation)
keywords_doc <- tm_map(keywords_doc, removeWords, stopwords("english"))
keywords_doc <- tm_map(keywords_doc, removeWords, c("the", "can",'did','like', 'and'))
dtm <- DocumentTermMatrix(keywords_doc)
dtm <- removeSparseTerms(dtm, 0.96)
top_terms=findMostFreqTerms(dtm, n = 20L)
top_terms=as.data.frame(do.call(rbind, top_terms))
text_stats$top_terms[k]=paste(colnames(top_terms)[1:15],sep="|-|", collapse=", ")
}
unique(text_stats$top_terms[1:12])
View(df_intermediate)
responses
url_vector
responses <- lapply(url_vector, GET)
set_config(use_proxy(url="10.3.100.207",port=8080))
responses <- lapply(url_vector, GET)
View(df_intermediate)
url_vector
