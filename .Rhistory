led_4=svysmooth(I(100*license3)~ern_val,subset(z2017_work_age,ern_val>=0&a_hga%in%44),bandwidth=10000);lines(led_4,col="darkred")
led_5=svysmooth(I(100*license3)~ern_val,subset(z2017_work_age,ern_val>=0&a_hga%in%45),bandwidth=10000);lines(led_5, col="purple")
led_6=svysmooth(I(100*license3)~ern_val,subset(z2017_work_age,ern_val>=0&a_hga%in%46),bandwidth=10000);lines(led_6, col="orange")
# Race
plot(c(0,150000),c(0,50),type='n',xlab='yearly earnings',ylab='% job requires license')
legend("topright",lty=c(1,1),col=c("red","blue","green"),legend=c("White","Black","Asian"),bty="n")
lw=svysmooth(I(100*license3)~ern_val,subset(z2018_work_age,	ern_val>=0&prdtrace%in%1),bandwidth=NULL);lines(lw,col="red")
lb=svysmooth(I(100*license3)~ern_val,subset(z2018_work_age,ern_val>=0&prdtrace%in%2),bandwidth=NULL);lines(lb, col="blue")
la=svysmooth(I(100*license3)~ern_val,subset(z2018_work_age,ern_val>=0&	prdtrace%in%4),bandwidth=NULL);lines(la, col="green")
dev.print(pdf, '/Users/rorr/Desktop/Welfare_Policy/Data/R - Survey data/Current Population Survey (CPS)/Licensure Images/Race_Only.pdf')
# Race
plot(c(0,150000),c(0,50),type='n',xlab='yearly earnings',ylab='% job requires license')
legend("topright",lty=c(1,1),col=c("red","blue","green"),legend=c("White","Black","Asian"),bty="n")
lw=svysmooth(I(100*license3)~ern_val,subset(z2018_work_age,	ern_val>=0&prdtrace%in%1),bandwidth=NULL);lines(lw,col="red")
lb=svysmooth(I(100*license3)~ern_val,subset(z2018_work_age,ern_val>=0&prdtrace%in%2),bandwidth=NULL);lines(lb, col="blue")
la=svysmooth(I(100*license3)~ern_val,subset(z2018_work_age,ern_val>=0&	prdtrace%in%4),bandwidth=NULL);lines(la, col="green")
dev.print(pdf, '/Users/rorr/Desktop/Welfare_Policy/Data/R - Survey data/Current Population Survey (CPS)/Licensure Images/Race_Only.pdf')
tr17=svyby(~license3, by=~occup_name+occup_major+det_occupation_name, design=z2017_work_age,svymean, na.rm=T)
tr18=svyby(~license3, by=~occup_name+occup_major+det_occupation_name, design=z2018_work_age,svymean, na.rm=T)
tl17=svyby(~license2, by=~occup_name+occup_major+det_occupation_name, design=z2017_work_age,svymean, na.rm=T)
tl18=svyby(~license2, by=~occup_name+occup_major+det_occupation_name, design=z2018_work_age,svymean, na.rm=T)
t17=svyby(~one, by=~occup_name+occup_major+det_occupation_name, design=z2017_work_age,svytotal, na.rm=T)
t18=svyby(~one, by=~occup_name+occup_major+det_occupation_name, design=z2018_work_age,svytotal, na.rm=T)
g17=svyby(~male, by=~occup_name+occup_major+det_occupation_name, design=z2017_work_age,svymean, na.rm=T)
g18=svyby(~male, by=~occup_name+occup_major+det_occupation_name, design=z2018_work_age,svymean, na.rm=T)
colnames(tl17)[colnames(tl17)=="license2"]="license_rate_17"
colnames(tl18)[colnames(tl18)=="license2"]="license_rate_18"
colnames(tr17)[colnames(tr17)=="license3"]="license_req_rate_17"
colnames(tr18)[colnames(tr18)=="license3"]="license_req_rate_18"
colnames(tr17)[colnames(tr17)=="se"]="se_rate_17"
colnames(tr18)[colnames(tr18)=="se"]="se_rate_18"
colnames(t17)[colnames(t17)=="one"]="count_17"
colnames(t18)[colnames(t18)=="one"]="count_18"
colnames(t17)[colnames(t17)=="se"]="se_17"
colnames(t18)[colnames(t18)=="se"]="se_18"
colnames(g17)[colnames(g17)=="male"]="gender_17"
colnames(g18)[colnames(g18)=="male"]="gender_18"
colnames(g17)[colnames(g17)=="se"]="se_gender_17"
colnames(g18)[colnames(g18)=="se"]="se_gender_18"
tl=merge(tl17,tl18 , by=c('occup_name','occup_major','det_occupation_name'),all = T)
tr=merge(tr17,tr18 , by=c('occup_name','occup_major','det_occupation_name'),all = T)
t= merge( t17, t18 , by=c('occup_name','occup_major','det_occupation_name'),all = T)
g= merge( g17, g18 , by=c('occup_name','occup_major','det_occupation_name'),all = T)
emp_growth= merge( tr, t , by=c('occup_name','occup_major','det_occupation_name'),all = T)
emp_growth= merge( emp_growth, tl , by=c('occup_name','occup_major','det_occupation_name'),all = T)
emp_growth= merge( emp_growth, g , by=c('occup_name','occup_major','det_occupation_name'),all = T)
names(emp_growth)
emp_growth=subset(emp_growth,occup_name!='Not in universe or children'&occup_major!='Not in universe or children'&det_occupation_name!='Not in universe or children')
emp_growth$license_rate_avg <- with(emp_growth, ((license_rate_17*license_rate_18)/2)*100)
emp_growth$license_rate_Δ <- with(emp_growth, ((license_rate_17*license_rate_18)/2)*100)
emp_growth$license_req_rate_avg <- with(emp_growth, ((license_req_rate_17*license_req_rate_18)/2)*100)
emp_growth$license_req_rate_Δ <- with(emp_growth, ((license_req_rate_17*license_req_rate_18)/2)*100)
emp_growth$gender_avg <- with(emp_growth, ((gender_18/gender_17)-1)*100)
emp_growth$occ_rate_Δ <- with(emp_growth, ((count_18/count_17)-1)*100)
emp_growth$occ_number_Δ <- with(emp_growth, ((count_18-count_17)))
write.csv(emp_growth, "occupational_growth.csv")
tr17=svyby(~license3, by=~occup_name+occup_major+det_occupation_name, design=z2017_work_age,svymean, na.rm=T)
tr18=svyby(~license3, by=~occup_name+occup_major+det_occupation_name, design=z2018_work_age,svymean, na.rm=T)
tl17=svyby(~license2, by=~occup_name+occup_major+det_occupation_name, design=z2017_work_age,svymean, na.rm=T)
tl18=svyby(~license2, by=~occup_name+occup_major+det_occupation_name, design=z2018_work_age,svymean, na.rm=T)
t17=svyby(~one, by=~occup_name+occup_major+det_occupation_name, design=z2017_work_age,svytotal, na.rm=T)
t18=svyby(~one, by=~occup_name+occup_major+det_occupation_name, design=z2018_work_age,svytotal, na.rm=T)
g17=svyby(~male, by=~occup_name+occup_major+det_occupation_name, design=z2017_work_age,svymean, na.rm=T)
g18=svyby(~male, by=~occup_name+occup_major+det_occupation_name, design=z2018_work_age,svymean, na.rm=T)
colnames(tl17)[colnames(tl17)=="license2"]="license_rate_17"
colnames(tl18)[colnames(tl18)=="license2"]="license_rate_18"
colnames(tr17)[colnames(tr17)=="license3"]="license_req_rate_17"
colnames(tr18)[colnames(tr18)=="license3"]="license_req_rate_18"
colnames(tr17)[colnames(tr17)=="se"]="se_rate_17"
colnames(tr18)[colnames(tr18)=="se"]="se_rate_18"
colnames(tl17)[colnames(tl17)=="se"]="se_req_rate_17"
colnames(tl18)[colnames(tl18)=="se"]="se_req_rate_18"
colnames(t17)[colnames(t17)=="one"]="count_17"
colnames(t18)[colnames(t18)=="one"]="count_18"
colnames(t17)[colnames(t17)=="se"]="se_17"
colnames(t18)[colnames(t18)=="se"]="se_18"
colnames(g17)[colnames(g17)=="male"]="gender_17"
colnames(g18)[colnames(g18)=="male"]="gender_18"
colnames(g17)[colnames(g17)=="se"]="se_gender_17"
colnames(g18)[colnames(g18)=="se"]="se_gender_18"
tl=merge(tl17,tl18 , by=c('occup_name','occup_major','det_occupation_name'),all = T)
tr=merge(tr17,tr18 , by=c('occup_name','occup_major','det_occupation_name'),all = T)
t= merge( t17, t18 , by=c('occup_name','occup_major','det_occupation_name'),all = T)
g= merge( g17, g18 , by=c('occup_name','occup_major','det_occupation_name'),all = T)
emp_growth= merge( tr, t , by=c('occup_name','occup_major','det_occupation_name'),all = T)
emp_growth= merge( emp_growth, tl , by=c('occup_name','occup_major','det_occupation_name'),all = T)
emp_growth= merge( emp_growth, g , by=c('occup_name','occup_major','det_occupation_name'),all = T)
names(emp_growth)
emp_growth=subset(emp_growth,occup_name!='Not in universe or children'&occup_major!='Not in universe or children'&det_occupation_name!='Not in universe or children')
emp_growth$license_rate_avg <- with(emp_growth, ((license_rate_17*license_rate_18)/2)*100)
emp_growth$license_rate_Δ <- with(emp_growth, ((license_rate_17*license_rate_18)/2)*100)
emp_growth$license_req_rate_avg <- with(emp_growth, ((license_req_rate_17*license_req_rate_18)/2)*100)
emp_growth$license_req_rate_Δ <- with(emp_growth, ((license_req_rate_17*license_req_rate_18)/2)*100)
emp_growth$gender_avg <- with(emp_growth, ((gender_18/gender_17)-1)*100)
emp_growth$occ_rate_Δ <- with(emp_growth, ((count_18/count_17)-1)*100)
emp_growth$occ_number_Δ <- with(emp_growth, ((count_18-count_17)))
write.csv(emp_growth, "occupational_growth.csv")
svymean(~as.factor(male),z2018_work_age)
emp_growth$gender_avg <- with(emp_growth, ((gender_18/gender_17))*100)
emp_growth$occ_rate_Δ <- with(emp_growth, ((count_18/count_17)-1)*100)
emp_growth$occ_number_Δ <- with(emp_growth, ((count_18-count_17)))
write.csv(emp_growth, "occupational_growth.csv")
View(emp_growth)
z2017_labor=subset(z2017,prpertyp==2&a_age%in%25:64&pemlr%in%1:4)
z2018_labor=subset(z2018,prpertyp==2&a_age%in%25:64&pemlr%in%1:4)
tr17=svyby(~license3, by=~occup_name+occup_major+det_occupation_name, design=z2017_labor,svymean, na.rm=T)
tr18=svyby(~license3, by=~occup_name+occup_major+det_occupation_name, design=z2018_labor,svymean, na.rm=T)
tl17=svyby(~license2, by=~occup_name+occup_major+det_occupation_name, design=z2017_labor,svymean, na.rm=T)
tl18=svyby(~license2, by=~occup_name+occup_major+det_occupation_name, design=z2018_labor,svymean, na.rm=T)
t17=svyby(~one, by=~occup_name+occup_major+det_occupation_name, design=z2017_labor,svytotal, na.rm=T)
t18=svyby(~one, by=~occup_name+occup_major+det_occupation_name, design=z2018_labor,svytotal, na.rm=T)
g17=svyby(~male, by=~occup_name+occup_major+det_occupation_name, design=z2017_labor,svymean, na.rm=T)
g18=svyby(~male, by=~occup_name+occup_major+det_occupation_name, design=z2018_labor,svymean, na.rm=T)
colnames(tl17)[colnames(tl17)=="license2"]="license_rate_17"
colnames(tl18)[colnames(tl18)=="license2"]="license_rate_18"
colnames(tr17)[colnames(tr17)=="license3"]="license_req_rate_17"
colnames(tr18)[colnames(tr18)=="license3"]="license_req_rate_18"
colnames(tr17)[colnames(tr17)=="se"]="se_rate_17"
colnames(tr18)[colnames(tr18)=="se"]="se_rate_18"
colnames(tl17)[colnames(tl17)=="se"]="se_req_rate_17"
colnames(tl18)[colnames(tl18)=="se"]="se_req_rate_18"
colnames(t17)[colnames(t17)=="one"]="count_17"
colnames(t18)[colnames(t18)=="one"]="count_18"
colnames(t17)[colnames(t17)=="se"]="se_17"
colnames(t18)[colnames(t18)=="se"]="se_18"
colnames(g17)[colnames(g17)=="male"]="gender_17"
colnames(g18)[colnames(g18)=="male"]="gender_18"
colnames(g17)[colnames(g17)=="se"]="se_gender_17"
colnames(g18)[colnames(g18)=="se"]="se_gender_18"
#svymean(~as.factor(male),z2018_work_age)
tl=merge(tl17,tl18 , by=c('occup_name','occup_major','det_occupation_name'),all = T)
tr=merge(tr17,tr18 , by=c('occup_name','occup_major','det_occupation_name'),all = T)
t= merge( t17, t18 , by=c('occup_name','occup_major','det_occupation_name'),all = T)
g= merge( g17, g18 , by=c('occup_name','occup_major','det_occupation_name'),all = T)
emp_growth= merge( tr, t , by=c('occup_name','occup_major','det_occupation_name'),all = T)
emp_growth= merge( emp_growth, tl , by=c('occup_name','occup_major','det_occupation_name'),all = T)
emp_growth= merge( emp_growth, g , by=c('occup_name','occup_major','det_occupation_name'),all = T)
names(emp_growth)
emp_growth=subset(emp_growth,occup_name!='Not in universe or children'&occup_major!='Not in universe or children'&det_occupation_name!='Not in universe or children')
emp_growth$license_rate_avg <- with(emp_growth, ((license_rate_17*license_rate_18)/2)*100)
emp_growth$license_rate_Δ <- with(emp_growth, ((license_rate_17*license_rate_18)/2)*100)
emp_growth$license_req_rate_avg <- with(emp_growth, ((license_req_rate_17*license_req_rate_18)/2)*100)
emp_growth$license_req_rate_Δ <- with(emp_growth, ((license_req_rate_17*license_req_rate_18)/2)*100)
emp_growth$gender_avg <- with(emp_growth, ((gender_18/gender_17))*100)
emp_growth$occ_rate_Δ <- with(emp_growth, ((count_18/count_17)-1)*100)
emp_growth$occ_number_Δ <- with(emp_growth, ((count_18-count_17)))
write.csv(emp_growth, "occupational_growth.csv")
emp_growth=subset(emp_growth,occup_name!='Not in universe or children'&occup_major!='Not in universe or children'&det_occupation_name!='Not in universe or children')
emp_growth$license_rate_avg <- with(emp_growth, ((license_rate_17*license_rate_18)/2)*100)
emp_growth$license_rate_Δ <- with(emp_growth, ((license_rate_17*license_rate_18)/2)*100)
emp_growth$license_req_rate_avg <- with(emp_growth, ((license_req_rate_17*license_req_rate_18)/2)*100)
emp_growth$license_req_rate_Δ <- with(emp_growth, ((license_req_rate_17*license_req_rate_18)/2)*100)
emp_growth$gender_avg <- with(emp_growth, ((gender_18+gender_17))/2)
emp_growth$occ_rate_Δ <- with(emp_growth, ((count_18/count_17)-1)*100)
emp_growth$occ_number_Δ <- with(emp_growth, ((count_18-count_17)))
write.csv(emp_growth, "occupational_growth.csv")
library(lodown)
# examine all available CPSBASIC microdata files
cpsbasic_cat = get_catalog( "cpsbasic" ,
output_dir = file.path( path.expand( "~" ) , "CPSBASIC" ) )
#cpsbasic_cat <- subset( cpsbasic_cat , year%in%2015:2018)
cpsbasic_cat <- subset( cpsbasic_cat , year%in%2016:2018 & month%in%1:12 )
cpsbasic_cat <- lodown( "cpsbasic" , cpsbasic_cat )
View(cpsbasic_cat)
cpsbasic_cat <- subset( cpsbasic_cat , year%in%2018 & month%in%1:12 )
cpsbasic_cat = get_catalog( "cpsbasic" ,output_dir = file.path( path.expand( "~" ) , "CPSBASIC" ) )
#cpsbasic_cat <- subset( cpsbasic_cat , year%in%2015:2018)
cpsbasic_cat <- subset( cpsbasic_cat , year%in%2018 & month%in%1:12 )
cpsbasic_cat <- lodown( "cpsbasic" , cpsbasic_cat )
sessionInfo()
sessionInfo()
# installing/loading the package:
if(!require(installr)) {
install.packages("installr");
require(installr)
} #load / install+load installr
# Google Analytics
setwd("~/Desktop/Welfare_Policy/Data/Data_Explorations/Google_Analytics(Cato)")
# My Packages
library(googleAnalyticsR)
library(tidyverse)
library(httr)
library(RCurl)
library(XML)
library(foreach)
library(stringr)
library(ggplot2)
library(data.table)
library(stringdist)
library(pbmcapply)
library(openxlsx)
#library(plyr)
# Define Date
current_date=format(Sys.time(), "%Y-%m-%d")
current_date=as.Date(current_date)
# Open Google Analytics
account_list=ga_account_list()
ga_id=account_list$viewId[1]
# Choose person(s) of interest
# Establish date range
from="2014-07-01" # (Earliest Available)
#from="2018-7-14" # (Insert Other)
to =as.character(current_date)
#### create filters on dimensions ####
dimf=dim_filter("dimension1","PARTIAL", expressions=name,not = F, caseSensitive = F)
dimf2=dim_filter("countryIsoCode","EXACT","US",not = F)
fc2=filter_clause_ga4(list(# dimf #,dimf2
), operator = "OR")
#### Construct File Name ####
from_s = (from);from_m = as.character(from)
from_y=str_sub(from, start=3, end = 4);from_m=str_sub(from, start=6, end = 7)
to_y=str_sub(to, start=3, end = 4);to_m=str_sub(to, start=6, end = 7)
analysis_range=paste0("(",from_m,from_y,'-',to_m,to_y,")")
initials=function(a, b){
a=str_split(a, "&")
a1=lapply(a, function(x){
x1=str_split(str_trim(x), " ")
paste0(unlist(lapply(x1, str_sub, 1, 2)), collapse="")	})
paste0(unlist(a1), b) }
analysis_identifier=initials(name,analysis_range)
library(stringdist)
library(xml2)
library(XML)
library(data.table)
#### Download & Split ####
url_1=download_xml('https://www.cato.org/sitemap.xml?page=1')
url_2=download_xml('https://www.cato.org/sitemap.xml?page=2')
# Read XML 1
xmlfile=xmlParse(url_1) # Parse
tagsList=xmlToList(xmlfile) # Convert to List
tagsList=lapply(tagsList, function(x) as.data.table(as.list(x)))# Each List element is a character vector. Convert them.
tags_1=rbindlist(tagsList, use.names = T, fill = T) # Rbind all the 1-row data.tables into a single data.table
tags_1=as.data.frame(tags_1) # convert to dataframe
# Read XML 2
xmlfile=xmlParse(url_2) # Parse
tagsList=xmlToList(xmlfile)# Convert to List
tagsList=lapply(tagsList, function(x) as.data.table(as.list(x)))# Each List element is a character vector. Convert them.
tags_2=rbindlist(tagsList, use.names = T, fill = T) # Rbind all the 1-row data.tables into a single data.table
tags_2=as.data.frame(tags_2) # convert to dataframe
# Combine XML tag pages
url_vector=merge(tags_1, tags_2, by=c('loc',"priority",'changefreq','lastmod','schemaLocation'), all = T)
url_vector=as.vector(url_vector$loc) # This is your vector of URLs from the XML Files
######## Apply & Save ########
SafeGet = function (x)	{
tryCatch({
#short_url_vector
html=GET(x)
print(html)
parsed=htmlParse(html)
root=xmlRoot(parsed)
title = xpathSApply(root, "//h1[@class='page-h1'][1]", xmlValue)
return(title)
Sys.sleep(.001)},
error=function(e){cat("ERROR :", conditionMessage(e))}, '0')}
split_url_vector = split(url_vector, ceiling(seq_along(url_vector)/5000))
split_8=split_url_vector[[8]];responses_8=pbmclapply(split_8,SafeGet,mc.preschedule=T);save(responses_8,file="responses_8.RData");rm(split_8)
split_9=split_url_vector[[9]];responses_9=pbmclapply(split_9,SafeGet,mc.preschedule=T);save(responses_9,file="responses_9.RData");rm(split_9)
split_10=split_url_vector[[10]];responses_10=pbmclapply(split_10,SafeGet,mc.preschedule=T);save(responses_10,file="responses_10.RData");rm(split_10)
split_11=split_url_vector[[11]];responses_11=pbmclapply(split_11,SafeGet,mc.preschedule=T);save(responses_11,file="responses_11.RData");rm(split_11)
split_12=split_url_vector[[12]];responses_12=pbmclapply(split_12,SafeGet,mc.preschedule=T);save(responses_12,file="responses_12.RData");rm(split_12)
split_13=split_url_vector[[13]];responses_13=pbmclapply(split_13,SafeGet,mc.preschedule=T);save(responses_13,file="responses_13.RData");rm(split_13)
split_14=split_url_vector[[14]];responses_14=pbmclapply(split_14,SafeGet,mc.preschedule=T);save(responses_14,file="responses_14.RData");rm(split_14)
website_responses=(c(responses_1,responses_2,responses_3,responses_4,responses_5,responses_6,responses_7,responses_8,responses_9,responses_10,responses_11, responses_12,responses_13,responses_14));rm(responses_1,responses_2,responses_3,responses_4,responses_5,responses_6,responses_7,responses_8,responses_9,responses_10,responses_11, responses_12,responses_13,responses_14)
title=trimws(website_responses);
link_title_df=as.data.frame(cbind(title=title, pagePath=url_vector))
load(file="responses_1.RData");load(file="responses_2.RData");load(file="responses_3.RData");load(file="responses_4.RData");load(file="responses_5.RData");load(file="responses_6.RData");load(file="responses_7.RData");load(file="responses_8.RData");load(file="responses_9.RData");load(file="responses_10.RData");load(file="responses_11.RData");load(file="responses_12.RData");load(file="responses_13.RData");load(file="responses_14.RData");
website_responses=(c(responses_1,responses_2,responses_3,responses_4,responses_5,responses_6,responses_7,responses_8,responses_9,responses_10,responses_11, responses_12,responses_13,responses_14));rm(responses_1,responses_2,responses_3,responses_4,responses_5,responses_6,responses_7,responses_8,responses_9,responses_10,responses_11, responses_12,responses_13,responses_14)
title=trimws(website_responses);
link_title_df=as.data.frame(cbind(title=title, pagePath=url_vector))
save(link_title_df, file = "link_title_df.RData")
View(link_title_df)
load(file="responses_1.RData")
View(responses_1)
responses_1
is.na(link_title_df) = lengths(link_title_df) == 0
link_title_df[lengths(link_title_df) == 0] = NA
link_title_df=subset(link_title_df, (link_title_df$title)!='NA')
load(file = "link_title_df.RData") # Load XML Dataframe
load(file = "df2.RData") # Load Dataframe with Twitter Data
is.na(link_title_df) = lengths(link_title_df) == 0
link_title_df[lengths(link_title_df) == 0] = NA
link_title_df=subset(link_title_df, (link_title_df$title)!='NA')
title_list<-link_title_df[["title"]]
url_list=link_title_df[["pagePath"]]
df_intermediate = merge(df2, link_title_df, by.x = 'pagePath', by.y = 'pagePath', all.x=T)
View(df_intermediate)
df_intermediate = merge(link_title_df,df2, by.x = 'pagePath', by.y = 'pagePath', all.x=T)
df_intermediate = merge(link_title_df,df2, by.x = 'pagePath', by.y = 'pagePath', all.y=T)
View(link_title_df)
link_title_df[lapply(link_title_df,length)>0] ## you can use sapply,rapply
link_title_df=link_title_df[lapply(link_title_df,length)>0] ## use lapply to remove empty lists
View(link_title_df)
link_title_df=link_title_df[lapply(link_title_df$title,length)>0] ## use lapply to remove empty lists
link_title_df=link_title_df$title[lapply(link_title_df$title,length)>0] ## use lapply to remove empty lists
load(file = "link_title_df.RData") # Load XML Dataframe
is.na(link_title_df) = lengths(link_title_df) == 0
link_title_df[lengths(link_title_df) == 0] = NA
link_title_df=subset(link_title_df, (link_title_df$title)!='NA')
link_title_df$title=link_title_df$title[lapply(link_title_df$title,length)>0] ## use lapply to remove empty lists
View(link_title_df)
link_title_df$title=link_title_df$title[lengths(link_title_df$title) > 0L]
View(link_title_df)
link_title_df <- link_title_df[!apply(link_title_df, 1, function(x) any(x=="")),]
link_title_df <- link_title_df$title[!apply(link_title_df$title, 1, function(x) any(x=="")),]
link_title_df[!(link_title_df$title) | link_title_df$title==""), ]
link_title_df[!(link_title_df$title) | link_title_df$title==""), ]
link_title_df[!(is.na(link_title_df$title) | link_title_df$title==""), ]
link_title_df=link_title_df[!(is.na(link_title_df$title) | link_title_df$title==""), ]
View(link_title_df)
link_title_df<-link_title_df[complete.cases(link_title_df),]
link_title_df=link_title_df[complete.cases(link_title_df),]
link_title_df[length(link_title_df) == 0] = NA
View(link_title_df)
link_title_df[length(link_title_df) == 0] = NA
link_title_df[length(link_title_df)==0]=NA
link_title_df=subset(link_title_df, (link_title_df$title)!='NA')
link_title_df[lapply(link_title_df$title,length)>0]
link_title_df$title
str(link_title_df)
link_title_df$title = as.character(link_title_df$title)
link_title_df$title = as.character(link_title_df$title)
link_title_df$pagePath = as.character(link_title_df$pagePath)
link_title_df$title = as.character(link_title_df$title)
link_title_df$pagePath = as.character(link_title_df$pagePath)
link_title_df[length(link_title_df)==0]=NA
link_title_df=subset(link_title_df, (link_title_df$title)!='NA')
link_title_df[lapply(link_title_df$title,length)>0]
link_title_df$title=link_title_df$title[lapply(link_title_df$title,length)>0]
View(link_title_df)
str(link_title_df)
load(file = "link_title_df.RData") # Load XML Dataframe
link_title_df$title = as.character(link_title_df$title)
link_title_df$pagePath = as.character(link_title_df$pagePath)
link_title_df[length(link_title_df)=='list()']=NA
link_title_df=subset(link_title_df, (link_title_df$title)!='NA')
str(link_title_df)
link_title_df=link_title_df[!(is.na(link_title_df$title)|link_title_df$title==""),]
link_title_df=link_title_df[complete.cases(link_title_df),]
View(link_title_df)
load(file = "link_title_df.RData") # Load XML Dataframe
link_title_df$title = as.character(link_title_df$title)
link_title_df$pagePath = as.character(link_title_df$pagePath)
link_title_df[length(link_title_df$title)==0]=NA
link_title_df=subset(link_title_df, (link_title_df$title)!='NA')
link_title_df=link_title_df[!(is.na(link_title_df$title)|link_title_df$title=='list()'),]
str(link_title_df)
View(link_title_df)
rm(tags_1,tags_2,tagsList,xmlfile,url_1,url_2,split_url_vector,website_responses)
rm(from_m,from_s,from_y,initials,account_list,ga_id,fc2,dimf2,to_m,to_y)
ClosestMatch2 = function(string, stringVector){stringVector[amatch(string, stringVector, maxDist=Inf,nomatch='0')]}
names(df2)
names(c(df2,link_title_df)
)
names(df2);names(link_title_df)
names(df2);names(link_title_df)
df_intermediate = merge(link_title_df,df2, by.x = 'title', by.y = 'pageTitle', all.y=T)
alt_title=pbmclapply(df_title, title_list, ClosestMatch2)
##### Titles #####
title_list=link_title_df[["title"]]
df_title=df2[["pageTitle"]]
alt_title=pbmclapply(df_title, title_list, ClosestMatch2)
df_title=unique(df2[["pageTitle"]])
alt_title=pbmclapply(df_title, title_list, ClosestMatch2)
df_title=as.vector(df_title)
df_title
df2$pageTitle=trimws(df2$pageTitle);
title_list=link_title_df[["title"]]
df_title=unique(df2[["pageTitle"]])
df_title=as.vector(df_title)
df_title=as.character(df_title)
alt_title=pbmclapply(df_title, title_list, ClosestMatch2)
ClosestMatch2 = function(string, stringVector){stringVector[amatch(string, stringVector, maxDist=20,nomatch='0')]}
alt_title=pbmclapply(df_title, title_list, ClosestMatch2)
df_title=as.list(df_title)
View(df_title)
title_list=as.list(link_title_df[["title"]])
df_title=as.list(unique(df2[["pageTitle"]]))
alt_title=pbmclapply(df_title, title_list, ClosestMatch2)
View(df_title)
View(title_list)
alt_title=pbmclapply(df_title, title_list, ClosestMatch2,mc.preschedule=T)
split_1=split_title_vector[[1]];responses_1=pbmclapply(split_1,ClosestMatch2,mc.preschedule=T)
split_title_vector = split(url_vector, ceiling(seq_along(url_vector)/5000))
split_1=split_title_vector[[1]];responses_1=pbmclapply(split_1,ClosestMatch2,mc.preschedule=T)
title_list=as.list(link_title_df[["title"]])
df_title=as.list(unique(df2[["pageTitle"]]))
#alt_title=pbmclapply(df_title, title_list, ClosestMatch2,mc.preschedule=T)
split_title_vector = split(df_title, ceiling(seq_along(df_title)/5000))
split_1=split_title_vector[[1]];responses_1=pbmclapply(split_1,title_list,ClosestMatch2,mc.preschedule=T)
ClosestMatch2 = function(string, stringVector){stringVector[amatch(string, stringVector, maxDist=Inf)]}
ClosestMatch2 = function(string, stringVector){stringVector[amatch(string, stringVector, maxDist=20,nomatch='0')]}
library(stringdist)
library(pbmcapply)
library(tidyverse)
library(httr)
library(RCurl)
library(XML)
library(foreach)
library(stringr)
library(ggplot2)
library(data.table)
library(stringdist)
library(pbmcapply)
library(openxlsx)
ClosestMatch2 = function(string, stringVector){stringVector[amatch(string, stringVector, maxDist=20,nomatch='0')]}
df2$pageTitle=trimws(df2$pageTitle);
title_list=as.list(link_title_df[["title"]])
df_title=as.list(unique(df2[["pageTitle"]]))
#alt_title=pbmclapply(df_title, title_list, ClosestMatch2,mc.preschedule=T)
split_title_vector = split(df_title, ceiling(seq_along(df_title)/5000))
split_1=split_title_vector[[1]];responses_1=pbmclapply(split_1,title_list,ClosestMatch2,mc.preschedule=T)
split_title_vector = split(df_title, ceiling(seq_along(df_title)/500))
alt_title = list();for(i in seq_along(split_title_vector[[1]])){
temp=scholars$name.twitter[i]
website.names[i] = ClosestMatch2(df_title, split_title_vector[[1]]) }
alt_title = list();for(i in seq_along(split_title_vector[[1]])){
website.names[i] = ClosestMatch2(df_title, split_title_vector[[1]]) }
split_title_vector = split(df_title, ceiling(seq_along(df_title)/50))
alt_title = list();for(i in seq_along(split_title_vector[[1]])){
alt_title[i] = ClosestMatch2(df_title, split_title_vector[[1]]) }
alt_title
split_title_vector[[1]]
split_title_vector[[1]]
split_title_vector = split(df_title, ceiling(seq_along(df_title)/1))
alt_title = list();for(i in seq_along(split_title_vector[[1]])){
alt_title[i] = ClosestMatch2(df_title, split_title_vector[[1]]) }
alt_title
split_title_vector = split(df_title, ceiling(seq_along(df_title)/2))
alt_title = list();for(i in seq_along(split_title_vector[[1]])){
alt_title[i] = ClosestMatch2(df_title, split_title_vector[[1]]) }
SafeMatch = function (x){
tryCatch({
ClosestMatch2(df_title, x)
Sys.sleep(0)},
error=function(e){cat("ERROR :", conditionMessage(e))}, '0')}
alt_title =pbmclapply(split_title_vector[[1]],SafeMatch,mc.preschedule=T)
alt_title
split_title_vector[[1]]
SafeMatch = function (x){
tryCatch({
ClosestMatch2(title_list, x)
Sys.sleep(0)},
error=function(e){cat("ERROR :", conditionMessage(e))}, '0')}
alt_title=pbmclapply(split_title_vector[[1]],SafeMatch,mc.preschedule=T)
alt_title
title_list=(link_title_df[["title"]])
SafeMatch = function (x){
tryCatch({
ClosestMatch2(title_list, x)
Sys.sleep(0)},
error=function(e){cat("ERROR :", conditionMessage(e))}, '0')}
alt_title=pbmclapply(split_title_vector[[1]],SafeMatch,mc.preschedule=T)
alt_title
SafeMatch = function (x){
tryCatch({
ClosestMatch2(x,title_list)
Sys.sleep(0)},
error=function(e){cat("ERROR :", conditionMessage(e))}, '0')}
alt_title=pbmclapply(split_title_vector[[1]],SafeMatch,mc.preschedule=T)
alt_title
split_title_vector[[1]]
title_list=(link_title_df[["title"]])
df_title=(unique(df2[["pageTitle"]]))
#alt_title=pbmclapply(df_title, title_list, ClosestMatch2,mc.preschedule=T)
split_title_vector = split(df_title, ceiling(seq_along(df_title)/2))
SafeMatch = function (x){
tryCatch({
ClosestMatch2(x,title_list)
Sys.sleep(0)},
error=function(e){cat("ERROR :", conditionMessage(e))}, '0')}
alt_title=pbmclapply(split_title_vector[[1]],SafeMatch,mc.preschedule=T)
alt_title
SafeMatch = function (x){
tryCatch({
matched=ClosestMatch2(x, title_list)
return(matched)
Sys.sleep(0)},
error=function(e){cat("ERROR :", conditionMessage(e))}, '0')}
alt_title=pbmclapply(split_title_vector[[1]],SafeMatch,mc.preschedule=T)
alt_title
title_list=(link_title_df[["title"]])
df_title=(unique(df2[["pageTitle"]]))
#alt_title=pbmclapply(df_title, title_list, ClosestMatch2,mc.preschedule=T)
split_title_vector = split(df_title, ceiling(seq_along(df_title)/5000))
SafeMatch = function (x){
tryCatch({
matched=ClosestMatch2(x, title_list)
return(matched)
Sys.sleep(0)},
error=function(e){cat("ERROR :", conditionMessage(e))}, '0')}
alt_title=pbmclapply(split_title_vector[[1]],SafeMatch,mc.preschedule=T)
alt_title_url_vector = split(df_title, ceiling(seq_along(df_title)/5000))
alt_title_url_vector = split(df_title, ceiling(seq_along(df_title)/5000))
alt_title1=alt_titleurl_vector[[1]];match1=pbmclapply(alt_title1,SafeMatch,mc.preschedule=T);save(match1,file="match1.RData");rm(alt_title1)
alt_title_vector = split(df_title, ceiling(seq_along(df_title)/5000))
alt_title1=alt_title_vector[[1]];match1=pbmclapply(alt_title1,SafeMatch,mc.preschedule=T);save(match1,file="match1.RData");rm(alt_title1)
title_vector = split(df_title, ceiling(seq_along(df_title)/5000))
alt_title2=title_vector[[2]];match2=pbmclapply(alt_title2,SafeMatch,mc.preschedule=T);save(match2,file="match2.RData");rm(alt_title2)
alt_title3=title_vector[[3]];match3=pbmclapply(alt_title3,SafeMatch,mc.preschedule=T);save(match3,file="match3.RData");rm(alt_title3)
alt_title4=title_vector[[4]];match4=pbmclapply(alt_title4,SafeMatch,mc.preschedule=T);save(match4,file="match4.RData");rm(alt_title4)
alt_title5=title_vector[[5]];match5=pbmclapply(alt_title5,SafeMatch,mc.preschedule=T);save(match5,file="match5.RData");rm(alt_title5)
alt_title6=title_vector[[6]];match6=pbmclapply(alt_title6,SafeMatch,mc.preschedule=T);save(match6,file="match6.RData");rm(alt_title6)
alt_title7=title_vector[[7]];match7=pbmclapply(alt_title7,SafeMatch,mc.preschedule=T);save(match7,file="match7.RData");rm(alt_title7)
alt_title8=title_vector[[8]];match8=pbmclapply(alt_title8,SafeMatch,mc.preschedule=T);save(match8,file="match8.RData");rm(alt_title8)
alt_title9=title_vector[[9]];match9=pbmclapply(alt_title9,SafeMatch,mc.preschedule=T);save(match9,file="match9.RData");rm(alt_title9)
alt_title10=title_vector[[10]];match10=pbmclapply(alt_title10,SafeMatch,mc.preschedule=T);save(match10,file="match10.RData");rm(alt_title10)
alt_title11=title_vector[[11]];match11=pbmclapply(alt_title11,SafeMatch,mc.preschedule=T);save(match11,file="match11.RData");rm(alt_title11)
alt_title11=title_vector[[11]];match11=pbmclapply(alt_title11,SafeMatch,mc.preschedule=T);save(match11,file="match11.RData");rm(alt_title11)
alt_title12=title_vector[[12]];match12=pbmclapply(alt_title12,SafeMatch,mc.preschedule=T);save(match12,file="match12.RData");rm(alt_title12)
alt_title13=title_vector[[13]];match13=pbmclapply(alt_title13,SafeMatch,mc.preschedule=T);save(match13,file="match13.RData");rm(alt_title13)
alt_title14=title_vector[[14]];match14=pbmclapply(alt_title14,SafeMatch,mc.preschedule=T);save(match14,file="match14.RData");rm(alt_title14)
load(file="match1.RData");load(file="match2.RData");load(file="match3.RData");load(file="match4.RData");load(file="match5.RData");load(file="match6.RData");load(file="match7.RData");load(file="match8.RData");load(file="match9.RData");load(file="match10.RData");load(file="match11.RData");load(file="match12.RData");load(file="match13.RData");load(file="match14.RData");
